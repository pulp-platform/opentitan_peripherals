From 5871d8df3ac87efa27d28a58cd5853cf14957197 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Sun, 19 Feb 2023 13:15:42 +0100
Subject: [PATCH] Adapt to PULP register_interface

---
 data/spi_host.hjson    |  28 ++--------
 rtl/spi_host.sv        | 140 +++++++++----------------------------------------
 rtl/spi_host_fsm.sv    |  13 ++---
 rtl/spi_host_window.sv |  94 ++++++++++++---------------------
 4 files changed, 70 insertions(+), 205 deletions(-)

diff --git a/data/spi_host.hjson b/data/spi_host.hjson
index 1c8cf92bf..b86df844b 100644
--- a/data/spi_host.hjson
+++ b/data/spi_host.hjson
@@ -3,25 +3,10 @@
 // SPDX-License-Identifier: Apache-2.0
 {
   name:               "spi_host",
-  one_line_desc:      "Serial peripheral interface for host mode, suitable for interfacing external serial NOR flash devices",
-  design_spec:        "../doc",
-  dv_doc:             "../doc/dv",
-  hw_checklist:       "../doc/checklist",
-  sw_checklist:       "/sw/device/lib/dif/dif_spi_host",
-  revisions: [
-    {
-      version:            "1.0",
-      life_stage:         "L1",
-      design_stage:       "D2S",
-      verification_stage: "V2S",
-      dif_stage:          "S2",
-    }
-  ]
-  clocking: [
-    {clock: "clk_i", reset: "rst_ni", primary: true},
-  ]
+  clock_primary: "clk_i",
+  other_clock_list: [ "clk_core_i" ],
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
   inter_signal_list: [
     { struct:  "passthrough",
@@ -47,7 +32,7 @@
     { name: "NumCS",
       desc: "The number of active-low chip select (cs_n) lines to create.",
       type: "int",
-      default: "1"
+      default: "2"
     },
     { name: "TxDepth",
       desc: "The size of the Tx FIFO (in words)",
@@ -97,11 +82,6 @@
       '''
     }
   ],
-  countermeasures: [
-    { name: "BUS.INTEGRITY",
-      desc: "End-to-end bus integrity scheme."
-    }
-  ]
   registers: [
     { name: "CONTROL",
       desc: "Control register",
diff --git a/rtl/spi_host.sv b/rtl/spi_host.sv
index 6ef35668c..ca205d54b 100644
--- a/rtl/spi_host.sv
+++ b/rtl/spi_host.sv
@@ -6,23 +6,20 @@
 //
 //
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module spi_host
   import spi_host_reg_pkg::*;
 #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
 ) (
   input              clk_i,
   input              rst_ni,
 
   // Register interface
-  input              tlul_pkg::tl_h2d_t tl_i,
-  output             tlul_pkg::tl_d2h_t tl_o,
-
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // SPI Interface
   output logic             cio_sck_o,
@@ -33,10 +30,6 @@ module spi_host
   output logic [3:0]       cio_sd_en_o,
   input        [3:0]       cio_sd_i,
 
-  // Passthrough interface
-  input  spi_device_pkg::passthrough_req_t passthrough_i,
-  output spi_device_pkg::passthrough_rsp_t passthrough_o,
-
   output logic             intr_error_o,
   output logic             intr_spi_event_o
 );
@@ -46,47 +39,25 @@ module spi_host
   spi_host_reg2hw_t reg2hw;
   spi_host_hw2reg_t hw2reg;
 
-  tlul_pkg::tl_h2d_t fifo_win_h2d [2];
-  tlul_pkg::tl_d2h_t fifo_win_d2h [2];
+  reg_req_t [1:0] fifo_win_h2d;
+  reg_rsp_t [1:0] fifo_win_d2h;
 
   // Register module
-  logic [NumAlerts-1:0] alert_test, alerts;
-  spi_host_reg_top u_reg (
+  spi_host_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
-    .tl_i       (tl_i),
-    .tl_o       (tl_o),
-    .tl_win_o   (fifo_win_h2d),
-    .tl_win_i   (fifo_win_d2h),
+    .reg_req_i,
+    .reg_rsp_o,
+    .reg_req_win_o (fifo_win_h2d),
+    .reg_rsp_win_i (fifo_win_d2h),
     .reg2hw,
     .hw2reg,
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o (alerts[0]),
     .devmode_i  (1'b1)
   );
 
-  // Alerts
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   logic             sck;
   logic [NumCS-1:0] csb;
   logic [3:0]       sd_out;
@@ -98,62 +69,13 @@ module spi_host
 
   assign sd_en     = output_en ? sd_en_core : 4'h0;
 
-  if (NumCS == 1) begin : gen_passthrough_implementation
-    logic passthrough_en;
-    assign passthrough_en  = passthrough_i.passthrough_en;
-
-    logic        pt_sck;
-    logic        pt_sck_en;
-    logic [0:0]  pt_csb;
-    logic [0:0]  pt_csb_en;
-    logic [3:0]  pt_sd_out;
-    logic [3:0]  pt_sd_en;
-
-    assign pt_sck       = passthrough_i.sck;
-    assign pt_sck_en    = passthrough_i.sck_en;
-    assign pt_csb[0]    = passthrough_i.csb;
-    assign pt_csb_en[0] = passthrough_i.csb_en;
-    assign pt_sd_out    = passthrough_i.s;
-    assign pt_sd_en     = passthrough_i.s_en;
-
-    assign cio_sck_o    = passthrough_en ? pt_sck    : sck;
-    assign cio_sck_en_o = passthrough_en ? pt_sck_en : output_en;
-    assign cio_csb_o    = passthrough_en ? pt_csb    : csb;
-    assign cio_csb_en_o = passthrough_en ? pt_csb_en : output_en;
-    assign cio_sd_o     = passthrough_en ? pt_sd_out : sd_out;
-    assign cio_sd_en_o  = passthrough_en ? pt_sd_en  : sd_en;
-
-  end                   : gen_passthrough_implementation
-  else begin            : gen_passthrough_ignore
-     // Passthrough only supported for instances with one CSb line
-    `ASSERT(PassthroughNumCSCompat_A, !passthrough_i.passthrough_en, clk_i, rst_ni)
-
-    assign cio_sck_o    = sck;
-    assign cio_sck_en_o = output_en;
-    assign cio_csb_o    = csb;
-    assign cio_csb_en_o = {NumCS{output_en}};
-    assign cio_sd_o     = sd_out;
-    assign cio_sd_en_o  = sd_en;
-
-    logic       unused_pt_en;
-    logic       unused_pt_sck;
-    logic       unused_pt_sck_en;
-    logic       unused_pt_csb;
-    logic       unused_pt_csb_en;
-    logic [3:0] unused_pt_sd_out;
-    logic [3:0] unused_pt_sd_en;
-
-    assign unused_pt_en     = passthrough_i.passthrough_en;
-    assign unused_pt_sck    = passthrough_i.sck;
-    assign unused_pt_sck_en = passthrough_i.sck_en;
-    assign unused_pt_csb    = passthrough_i.csb;
-    assign unused_pt_csb_en = passthrough_i.csb_en;
-    assign unused_pt_sd_out = passthrough_i.s;
-    assign unused_pt_sd_en  = passthrough_i.s_en;
-
-  end                   : gen_passthrough_ignore
-
-  assign passthrough_o.s = cio_sd_i;
+  assign cio_sck_o    = sck;
+  assign cio_sck_en_o = 1'b1;
+  assign cio_csb_o    = csb;
+  assign cio_csb_en_o = {NumCS{1'b1}};
+  assign cio_sd_o     = sd_out;
+  assign cio_sd_en_o  = sd_en;
+
   assign sd_i            = cio_sd_i;
 
   assign hw2reg.status.byteorder.d  = ByteOrder;
@@ -295,7 +217,10 @@ module spi_host
   logic        rx_valid;
   logic        rx_ready;
 
-  spi_host_window u_window (
+  spi_host_window #(
+    .reg_req_t  (reg_req_t),
+    .reg_rsp_t  (reg_rsp_t)
+  ) u_window (
     .clk_i,
     .rst_ni,
     .rx_win_i   (fifo_win_h2d[0]),
@@ -601,25 +526,12 @@ module spi_host
   );
 
 
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
-  `ASSERT_KNOWN(AlertKnownO_A, alert_tx_o)
   `ASSERT_KNOWN(CioSckKnownO_A, cio_sck_o)
   `ASSERT_KNOWN(CioSckEnKnownO_A, cio_sck_en_o)
   `ASSERT_KNOWN(CioCsbKnownO_A, cio_csb_o)
   `ASSERT_KNOWN(CioCsbEnKnownO_A, cio_csb_en_o)
-  `ASSERT_KNOWN_IF(CioSdKnownO_A, cio_sd_o, !passthrough_i.passthrough_en |
-    (passthrough_i.passthrough_en && passthrough_i.csb_en && !passthrough_i.csb),
-    passthrough_i.sck_en & passthrough_i.sck)
   `ASSERT_KNOWN(CioSdEnKnownO_A, cio_sd_en_o)
   `ASSERT_KNOWN(IntrSpiEventKnownO_A, intr_spi_event_o)
   `ASSERT_KNOWN(IntrErrorKnownO_A, intr_error_o)
 
-  // passthrough_o.s is passed through to spi_device, it may contain unknown data,
-  // but the unknown data won't be used based on the SPI protocol.
-  // Hence, instead of checking known data, here does a connectivity check.
-  `ASSERT(PassthroughConn_A, passthrough_o.s === cio_sd_i)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule : spi_host
diff --git a/rtl/spi_host_fsm.sv b/rtl/spi_host_fsm.sv
index 7ab175473..842a75897 100644
--- a/rtl/spi_host_fsm.sv
+++ b/rtl/spi_host_fsm.sv
@@ -5,6 +5,8 @@
 // Core Implemenation module for Serial Peripheral Interface (SPI) Host IP.
 //
 
+`include "common_cells/assertions.svh"
+
 module spi_host_fsm
   import spi_host_cmd_pkg::*;
 #(
@@ -564,7 +566,8 @@ module spi_host_fsm
     end else begin
       unique case (speed_o)
         Standard: begin
-          sd_en_o[0]   = 1'b1;
+          // TODO @paulsc: We fixed this from 1'b1 before; is this fix still valid?
+          sd_en_o[0]   = cmd_wr_en_q;
           sd_en_o[1]   = 1'b0;
           sd_en_o[3:2] = 2'b00;
         end
@@ -587,10 +590,8 @@ module spi_host_fsm
   // Assertions confirming valid user input.
   //
 
-  `ASSERT(BidirOnlyInStdMode_A,
-      cmd_speed_d == Standard || !(cmd_rd_en_d && cmd_wr_en_d),
-      clk_i, rst_ni)
-  `ASSERT(ValidSpeed_A, cmd_speed_d != RsvdSpd, clk_i, rst_ni)
-  `ASSERT(ValidCSID_A, csid < NumCS, clk_i, rst_ni)
+  `ASSERT(BidirOnlyInStdMode_A, $isunknown(rst_ni) || (cmd_speed_d == Standard || !(cmd_rd_en_d && cmd_wr_en_d)), clk_i, rst_ni)
+  `ASSERT(ValidSpeed_A, $isunknown(rst_ni) || (cmd_speed_d != RsvdSpd), clk_i, rst_ni)
+  `ASSERT(ValidCSID_A, $isunknown(rst_ni) || (csid < NumCS), clk_i, rst_ni)
 
 endmodule
diff --git a/rtl/spi_host_window.sv b/rtl/spi_host_window.sv
index a532e4753..a10ff9328 100644
--- a/rtl/spi_host_window.sv
+++ b/rtl/spi_host_window.sv
@@ -5,13 +5,18 @@
 // Module to manage TX FIFO window for Serial Peripheral Interface (SPI) host IP.
 //
 
-module spi_host_window (
+`include "common_cells/assertions.svh"
+
+module spi_host_window #(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
+)(
   input  clk_i,
   input  rst_ni,
-  input  tlul_pkg::tl_h2d_t rx_win_i,
-  output tlul_pkg::tl_d2h_t rx_win_o,
-  input  tlul_pkg::tl_h2d_t tx_win_i,
-  output tlul_pkg::tl_d2h_t tx_win_o,
+  input  reg_req_t          rx_win_i,
+  output reg_rsp_t          rx_win_o,
+  input  reg_req_t          tx_win_i,
+  output reg_rsp_t          tx_win_o,
   output logic [31:0]       tx_data_o,
   output logic [3:0]        tx_be_o,
   output logic              tx_valid_o,
@@ -29,61 +34,28 @@ module spi_host_window (
   logic  rx_access_error;
   assign rx_access_error = rx_we;
 
-  tlul_adapter_reg #(
-    .RegAw (AW),
-    .RegDw (DW)
-  ) u_adapter_rx (
-    .clk_i,
-    .rst_ni,
-    .tl_i        (rx_win_i),
-    .tl_o        (rx_win_o),
-    .en_ifetch_i (prim_mubi_pkg::MuBi4False),
-    .intg_error_o(),
-    .we_o        (rx_we),
-    .re_o        (rx_ready_o),
-    .addr_o      (),
-    .wdata_o     (),
-    .be_o        (),
-    .rdata_i     (rx_data_i),
-    .error_i     (rx_access_error),
-    .busy_i      ('0)
-  );
-
-  // translate bitmask to byte mask
-  logic [DW-1:0] bit_mask;
-  for (genvar i = 0; i < ByteMaskW; i++) begin : gen_byte_mask
-     assign tx_be_o[i] = |bit_mask[i*8 +: 8];
-
-    // all the bits of particular byte must be the same
-    `ASSERT(BitMaskCheck_A, (|bit_mask[i*8 +: 8] == 1'b0) ||
-                            (&bit_mask[i*8 +: 8] == 1'b1))
-  end
-
-  // Only support writes to the data TX fifo window
-  tlul_adapter_sram #(
-    .SramAw(AW),
-    .SramDw(DW),
-    .Outstanding(1),
-    .ByteAccess(1),
-    .ErrOnWrite(0),
-    .ErrOnRead(1)
-  ) u_adapter_tx (
-    .clk_i,
-    .rst_ni,
-    .tl_i(tx_win_i),
-    .tl_o(tx_win_o),
-    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
-    .req_o(tx_valid_o),
-    .req_type_o(),
-    .gnt_i(1'b1),
-    .we_o(),
-    .addr_o(),
-    .wdata_o(tx_data_o),
-    .wmask_o(bit_mask),
-    .intg_error_o(),
-    .rdata_i('0),
-    .rvalid_i('0),
-    .rerror_i('0)
-  );
+  // Check that our RX regbus data is 32 bit wide
+  `ASSERT_INIT(RxRegbusIs32Bit, $bits(rx_win_i.wdata) == 32)
+
+  // We are already a regbus, so no stateful adapter should be needed here
+  // Request
+  assign rx_we        = rx_win_i.valid & rx_win_i.write;    // write-enable
+  assign rx_ready_o   = rx_win_i.valid & ~rx_win_i.write;   // read-enable
+  // Response: always ready, else over/underflow error reported in regfile
+  assign rx_win_o.rdata  = rx_data_i;
+  assign rx_win_o.error  = rx_access_error;
+  assign rx_win_o.ready  = 1'b1;
+
+  // Check that our TX regbus data is 32 bit wide
+  `ASSERT_INIT(TxRegbusIs32Bit, $bits(tx_win_i.wdata) == 32)
+
+  // We are already a regbus, so no stateful adapter should be needed here
+  // Request
+  assign tx_valid_o   = tx_win_i.valid;
+  assign tx_data_o    = tx_win_i.wdata;
+  assign tx_be_o      = tx_win_i.wstrb;
+  // Response: always grant and no error, else over/underflow error reported in regfile
+  assign tx_win_o.error  = 1'b0;
+  assign tx_win_o.ready  = 1'b1;
 
 endmodule : spi_host_window
-- 
2.16.5

