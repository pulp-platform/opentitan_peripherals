From 4339534c412e3c0eff5cffdc085928d23dda84a7 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Mon, 13 Feb 2023 23:59:58 +0100
Subject: [PATCH] regs: Regenerate

---
 rtl/spi_host_reg_pkg.sv |   50 +-
 rtl/spi_host_reg_top.sv | 1482 +++++++++++++++++++++++++++--------------------
 2 files changed, 886 insertions(+), 646 deletions(-)

diff --git a/rtl/spi_host_reg_pkg.sv b/rtl/spi_host_reg_pkg.sv
index 587f8ead2..b3892cf02 100644
--- a/rtl/spi_host_reg_pkg.sv
+++ b/rtl/spi_host_reg_pkg.sv
@@ -8,7 +8,7 @@ package spi_host_reg_pkg;
 
   // Param list
   parameter logic ByteOrder = 1;
-  parameter int NumCS = 1;
+  parameter int NumCS = 2;
   parameter int TxDepth = 72;
   parameter int RxDepth = 64;
   parameter int CmdDepth = 4;
@@ -279,12 +279,12 @@ package spi_host_reg_pkg;
 
   // Register -> HW type
   typedef struct packed {
-    spi_host_reg2hw_intr_state_reg_t intr_state; // [126:125]
-    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [124:123]
-    spi_host_reg2hw_intr_test_reg_t intr_test; // [122:119]
-    spi_host_reg2hw_alert_test_reg_t alert_test; // [118:117]
-    spi_host_reg2hw_control_reg_t control; // [116:98]
-    spi_host_reg2hw_configopts_mreg_t [0:0] configopts; // [97:67]
+    spi_host_reg2hw_intr_state_reg_t intr_state; // [157:156]
+    spi_host_reg2hw_intr_enable_reg_t intr_enable; // [155:154]
+    spi_host_reg2hw_intr_test_reg_t intr_test; // [153:150]
+    spi_host_reg2hw_alert_test_reg_t alert_test; // [149:148]
+    spi_host_reg2hw_control_reg_t control; // [147:129]
+    spi_host_reg2hw_configopts_mreg_t [1:0] configopts; // [128:67]
     spi_host_reg2hw_csid_reg_t csid; // [66:35]
     spi_host_reg2hw_command_reg_t command; // [34:17]
     spi_host_reg2hw_error_enable_reg_t error_enable; // [16:12]
@@ -306,12 +306,13 @@ package spi_host_reg_pkg;
   parameter logic [BlockAw-1:0] SPI_HOST_ALERT_TEST_OFFSET = 6'h c;
   parameter logic [BlockAw-1:0] SPI_HOST_CONTROL_OFFSET = 6'h 10;
   parameter logic [BlockAw-1:0] SPI_HOST_STATUS_OFFSET = 6'h 14;
-  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_OFFSET = 6'h 18;
-  parameter logic [BlockAw-1:0] SPI_HOST_CSID_OFFSET = 6'h 1c;
-  parameter logic [BlockAw-1:0] SPI_HOST_COMMAND_OFFSET = 6'h 20;
-  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_ENABLE_OFFSET = 6'h 2c;
-  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_STATUS_OFFSET = 6'h 30;
-  parameter logic [BlockAw-1:0] SPI_HOST_EVENT_ENABLE_OFFSET = 6'h 34;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_0_OFFSET = 6'h 18;
+  parameter logic [BlockAw-1:0] SPI_HOST_CONFIGOPTS_1_OFFSET = 6'h 1c;
+  parameter logic [BlockAw-1:0] SPI_HOST_CSID_OFFSET = 6'h 20;
+  parameter logic [BlockAw-1:0] SPI_HOST_COMMAND_OFFSET = 6'h 24;
+  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_ENABLE_OFFSET = 6'h 30;
+  parameter logic [BlockAw-1:0] SPI_HOST_ERROR_STATUS_OFFSET = 6'h 34;
+  parameter logic [BlockAw-1:0] SPI_HOST_EVENT_ENABLE_OFFSET = 6'h 38;
 
   // Reset values for hwext registers and their fields
   parameter logic [1:0] SPI_HOST_INTR_TEST_RESVAL = 2'h 0;
@@ -326,9 +327,9 @@ package spi_host_reg_pkg;
   parameter logic [1:0] SPI_HOST_COMMAND_DIRECTION_RESVAL = 2'h 0;
 
   // Window parameters
-  parameter logic [BlockAw-1:0] SPI_HOST_RXDATA_OFFSET = 6'h 24;
+  parameter logic [BlockAw-1:0] SPI_HOST_RXDATA_OFFSET = 6'h 28;
   parameter int unsigned        SPI_HOST_RXDATA_SIZE   = 'h 4;
-  parameter logic [BlockAw-1:0] SPI_HOST_TXDATA_OFFSET = 6'h 28;
+  parameter logic [BlockAw-1:0] SPI_HOST_TXDATA_OFFSET = 6'h 2c;
   parameter int unsigned        SPI_HOST_TXDATA_SIZE   = 'h 4;
 
   // Register index
@@ -339,7 +340,8 @@ package spi_host_reg_pkg;
     SPI_HOST_ALERT_TEST,
     SPI_HOST_CONTROL,
     SPI_HOST_STATUS,
-    SPI_HOST_CONFIGOPTS,
+    SPI_HOST_CONFIGOPTS_0,
+    SPI_HOST_CONFIGOPTS_1,
     SPI_HOST_CSID,
     SPI_HOST_COMMAND,
     SPI_HOST_ERROR_ENABLE,
@@ -348,19 +350,21 @@ package spi_host_reg_pkg;
   } spi_host_id_e;
 
   // Register width information to check illegal writes
-  parameter logic [3:0] SPI_HOST_PERMIT [12] = '{
+  parameter logic [3:0] SPI_HOST_PERMIT [13] = '{
     4'b 0001, // index[ 0] SPI_HOST_INTR_STATE
     4'b 0001, // index[ 1] SPI_HOST_INTR_ENABLE
     4'b 0001, // index[ 2] SPI_HOST_INTR_TEST
     4'b 0001, // index[ 3] SPI_HOST_ALERT_TEST
     4'b 1111, // index[ 4] SPI_HOST_CONTROL
     4'b 1111, // index[ 5] SPI_HOST_STATUS
-    4'b 1111, // index[ 6] SPI_HOST_CONFIGOPTS
-    4'b 1111, // index[ 7] SPI_HOST_CSID
-    4'b 0011, // index[ 8] SPI_HOST_COMMAND
-    4'b 0001, // index[ 9] SPI_HOST_ERROR_ENABLE
-    4'b 0001, // index[10] SPI_HOST_ERROR_STATUS
-    4'b 0001  // index[11] SPI_HOST_EVENT_ENABLE
+    4'b 1111, // index[ 6] SPI_HOST_CONFIGOPTS_0
+    4'b 1111, // index[ 7] SPI_HOST_CONFIGOPTS_1
+    4'b 1111, // index[ 8] SPI_HOST_CSID
+    4'b 0011, // index[ 9] SPI_HOST_COMMAND
+    4'b 0001, // index[10] SPI_HOST_ERROR_ENABLE
+    4'b 0001, // index[11] SPI_HOST_ERROR_STATUS
+    4'b 0001  // index[12] SPI_HOST_EVENT_ENABLE
   };
 
 endpackage
+
diff --git a/rtl/spi_host_reg_top.sv b/rtl/spi_host_reg_top.sv
index 33718bb56..0de4a8b60 100644
--- a/rtl/spi_host_reg_top.sv
+++ b/rtl/spi_host_reg_top.sv
@@ -4,24 +4,27 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
 
-module spi_host_reg_top (
-  input clk_i,
-  input rst_ni,
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+`include "common_cells/assertions.svh"
+
+module spi_host_reg_top #(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic,
+  parameter int AW = 6
+) (
+  input logic clk_i,
+  input logic rst_ni,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Output port for window
-  output tlul_pkg::tl_h2d_t tl_win_o  [2],
-  input  tlul_pkg::tl_d2h_t tl_win_i  [2],
+  output reg_req_t [2-1:0] reg_req_win_o,
+  input  reg_rsp_t [2-1:0] reg_rsp_win_i,
 
   // To HW
   output spi_host_reg_pkg::spi_host_reg2hw_t reg2hw, // Write
   input  spi_host_reg_pkg::spi_host_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -29,7 +32,6 @@ module spi_host_reg_top (
 
   import spi_host_reg_pkg::* ;
 
-  localparam int AW = 6;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -45,163 +47,105 @@ module spi_host_reg_top (
   logic          addrmiss, wr_err;
 
   logic [DW-1:0] reg_rdata_next;
-  logic reg_busy;
-
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
-
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [11:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(12)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
 
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
+  // Below register interface can be changed
+  reg_req_t  reg_intf_req;
+  reg_rsp_t  reg_intf_rsp;
 
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o(tl_o)
-  );
 
-  tlul_pkg::tl_h2d_t tl_socket_h2d [3];
-  tlul_pkg::tl_d2h_t tl_socket_d2h [3];
+  logic [0:0] reg_steer;
 
-  logic [1:0] reg_steer;
+  reg_req_t [3-1:0] reg_intf_demux_req;
+  reg_rsp_t [3-1:0] reg_intf_demux_rsp;
 
-  // socket_1n connection
-  assign tl_reg_h2d = tl_socket_h2d[2];
-  assign tl_socket_d2h[2] = tl_reg_d2h;
+  // demux connection
+  assign reg_intf_req = reg_intf_demux_req[2];
+  assign reg_intf_demux_rsp[2] = reg_intf_rsp;
 
-  assign tl_win_o[0] = tl_socket_h2d[0];
-  assign tl_socket_d2h[0] = tl_win_i[0];
-  assign tl_win_o[1] = tl_socket_h2d[1];
-  assign tl_socket_d2h[1] = tl_win_i[1];
+  assign reg_req_win_o[0] = reg_intf_demux_req[0];
+  assign reg_intf_demux_rsp[0] = reg_rsp_win_i[0];
+  assign reg_req_win_o[1] = reg_intf_demux_req[1];
+  assign reg_intf_demux_rsp[1] = reg_rsp_win_i[1];
 
   // Create Socket_1n
-  tlul_socket_1n #(
-    .N            (3),
-    .HReqPass     (1'b1),
-    .HRspPass     (1'b1),
-    .DReqPass     ({3{1'b1}}),
-    .DRspPass     ({3{1'b1}}),
-    .HReqDepth    (4'h0),
-    .HRspDepth    (4'h0),
-    .DReqDepth    ({3{4'h0}}),
-    .DRspDepth    ({3{4'h0}}),
-    .ExplicitErrs (1'b0)
-  ) u_socket (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
-    .tl_h_i (tl_i),
-    .tl_h_o (tl_o_pre),
-    .tl_d_o (tl_socket_h2d),
-    .tl_d_i (tl_socket_d2h),
-    .dev_select_i (reg_steer)
+  reg_demux #(
+    .NoPorts  (3),
+    .req_t    (reg_req_t),
+    .rsp_t    (reg_rsp_t)
+  ) i_reg_demux (
+    .clk_i,
+    .rst_ni,
+    .in_req_i (reg_req_i),
+    .in_rsp_o (reg_rsp_o),
+    .out_req_o (reg_intf_demux_req),
+    .out_rsp_i (reg_intf_demux_rsp),
+    .in_select_i (reg_steer)
   );
 
+
   // Create steering logic
   always_comb begin
-    reg_steer =
-        tl_i.a_address[AW-1:0] inside {[36:39]} ? 2'd0 :
-        tl_i.a_address[AW-1:0] inside {[40:43]} ? 2'd1 :
-        // Default set to register
-        2'd2;
-
-    // Override this in case of an integrity error
-    if (intg_err) begin
-      reg_steer = 2'd2;
+    reg_steer = 2;       // Default set to register
+
+    // TODO: Can below codes be unique case () inside ?
+    if (reg_req_i.addr[AW-1:0] >= 40 && reg_req_i.addr[AW-1:0] < 44) begin
+      reg_steer = 0;
+    end
+    if (reg_req_i.addr[AW-1:0] >= 44 && reg_req_i.addr[AW-1:0] < 48) begin
+      reg_steer = 1;
     end
   end
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
 
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
-
-    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
-    .intg_error_o(),
-
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .busy_i  (reg_busy),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
-
-  // cdc oversampling signals
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
-  logic intr_state_we;
   logic intr_state_error_qs;
   logic intr_state_error_wd;
+  logic intr_state_error_we;
   logic intr_state_spi_event_qs;
   logic intr_state_spi_event_wd;
-  logic intr_enable_we;
+  logic intr_state_spi_event_we;
   logic intr_enable_error_qs;
   logic intr_enable_error_wd;
+  logic intr_enable_error_we;
   logic intr_enable_spi_event_qs;
   logic intr_enable_spi_event_wd;
-  logic intr_test_we;
+  logic intr_enable_spi_event_we;
   logic intr_test_error_wd;
+  logic intr_test_error_we;
   logic intr_test_spi_event_wd;
-  logic alert_test_we;
+  logic intr_test_spi_event_we;
   logic alert_test_wd;
-  logic control_we;
+  logic alert_test_we;
   logic [7:0] control_rx_watermark_qs;
   logic [7:0] control_rx_watermark_wd;
+  logic control_rx_watermark_we;
   logic [7:0] control_tx_watermark_qs;
   logic [7:0] control_tx_watermark_wd;
+  logic control_tx_watermark_we;
   logic control_output_en_qs;
   logic control_output_en_wd;
+  logic control_output_en_we;
   logic control_sw_rst_qs;
   logic control_sw_rst_wd;
+  logic control_sw_rst_we;
   logic control_spien_qs;
   logic control_spien_wd;
+  logic control_spien_we;
   logic [7:0] status_txqd_qs;
   logic [7:0] status_rxqd_qs;
   logic [3:0] status_cmdqd_qs;
@@ -216,116 +160,160 @@ module spi_host_reg_top (
   logic status_txfull_qs;
   logic status_active_qs;
   logic status_ready_qs;
-  logic configopts_we;
-  logic [15:0] configopts_clkdiv_0_qs;
-  logic [15:0] configopts_clkdiv_0_wd;
-  logic [3:0] configopts_csnidle_0_qs;
-  logic [3:0] configopts_csnidle_0_wd;
-  logic [3:0] configopts_csntrail_0_qs;
-  logic [3:0] configopts_csntrail_0_wd;
-  logic [3:0] configopts_csnlead_0_qs;
-  logic [3:0] configopts_csnlead_0_wd;
-  logic configopts_fullcyc_0_qs;
-  logic configopts_fullcyc_0_wd;
-  logic configopts_cpha_0_qs;
-  logic configopts_cpha_0_wd;
-  logic configopts_cpol_0_qs;
-  logic configopts_cpol_0_wd;
-  logic csid_we;
+  logic [15:0] configopts_0_clkdiv_0_qs;
+  logic [15:0] configopts_0_clkdiv_0_wd;
+  logic configopts_0_clkdiv_0_we;
+  logic [3:0] configopts_0_csnidle_0_qs;
+  logic [3:0] configopts_0_csnidle_0_wd;
+  logic configopts_0_csnidle_0_we;
+  logic [3:0] configopts_0_csntrail_0_qs;
+  logic [3:0] configopts_0_csntrail_0_wd;
+  logic configopts_0_csntrail_0_we;
+  logic [3:0] configopts_0_csnlead_0_qs;
+  logic [3:0] configopts_0_csnlead_0_wd;
+  logic configopts_0_csnlead_0_we;
+  logic configopts_0_fullcyc_0_qs;
+  logic configopts_0_fullcyc_0_wd;
+  logic configopts_0_fullcyc_0_we;
+  logic configopts_0_cpha_0_qs;
+  logic configopts_0_cpha_0_wd;
+  logic configopts_0_cpha_0_we;
+  logic configopts_0_cpol_0_qs;
+  logic configopts_0_cpol_0_wd;
+  logic configopts_0_cpol_0_we;
+  logic [15:0] configopts_1_clkdiv_1_qs;
+  logic [15:0] configopts_1_clkdiv_1_wd;
+  logic configopts_1_clkdiv_1_we;
+  logic [3:0] configopts_1_csnidle_1_qs;
+  logic [3:0] configopts_1_csnidle_1_wd;
+  logic configopts_1_csnidle_1_we;
+  logic [3:0] configopts_1_csntrail_1_qs;
+  logic [3:0] configopts_1_csntrail_1_wd;
+  logic configopts_1_csntrail_1_we;
+  logic [3:0] configopts_1_csnlead_1_qs;
+  logic [3:0] configopts_1_csnlead_1_wd;
+  logic configopts_1_csnlead_1_we;
+  logic configopts_1_fullcyc_1_qs;
+  logic configopts_1_fullcyc_1_wd;
+  logic configopts_1_fullcyc_1_we;
+  logic configopts_1_cpha_1_qs;
+  logic configopts_1_cpha_1_wd;
+  logic configopts_1_cpha_1_we;
+  logic configopts_1_cpol_1_qs;
+  logic configopts_1_cpol_1_wd;
+  logic configopts_1_cpol_1_we;
   logic [31:0] csid_qs;
   logic [31:0] csid_wd;
-  logic command_we;
+  logic csid_we;
   logic [8:0] command_len_wd;
+  logic command_len_we;
   logic command_csaat_wd;
+  logic command_csaat_we;
   logic [1:0] command_speed_wd;
+  logic command_speed_we;
   logic [1:0] command_direction_wd;
-  logic error_enable_we;
+  logic command_direction_we;
   logic error_enable_cmdbusy_qs;
   logic error_enable_cmdbusy_wd;
+  logic error_enable_cmdbusy_we;
   logic error_enable_overflow_qs;
   logic error_enable_overflow_wd;
+  logic error_enable_overflow_we;
   logic error_enable_underflow_qs;
   logic error_enable_underflow_wd;
+  logic error_enable_underflow_we;
   logic error_enable_cmdinval_qs;
   logic error_enable_cmdinval_wd;
+  logic error_enable_cmdinval_we;
   logic error_enable_csidinval_qs;
   logic error_enable_csidinval_wd;
-  logic error_status_we;
+  logic error_enable_csidinval_we;
   logic error_status_cmdbusy_qs;
   logic error_status_cmdbusy_wd;
+  logic error_status_cmdbusy_we;
   logic error_status_overflow_qs;
   logic error_status_overflow_wd;
+  logic error_status_overflow_we;
   logic error_status_underflow_qs;
   logic error_status_underflow_wd;
+  logic error_status_underflow_we;
   logic error_status_cmdinval_qs;
   logic error_status_cmdinval_wd;
+  logic error_status_cmdinval_we;
   logic error_status_csidinval_qs;
   logic error_status_csidinval_wd;
+  logic error_status_csidinval_we;
   logic error_status_accessinval_qs;
   logic error_status_accessinval_wd;
-  logic event_enable_we;
+  logic error_status_accessinval_we;
   logic event_enable_rxfull_qs;
   logic event_enable_rxfull_wd;
+  logic event_enable_rxfull_we;
   logic event_enable_txempty_qs;
   logic event_enable_txempty_wd;
+  logic event_enable_txempty_we;
   logic event_enable_rxwm_qs;
   logic event_enable_rxwm_wd;
+  logic event_enable_rxwm_we;
   logic event_enable_txwm_qs;
   logic event_enable_txwm_wd;
+  logic event_enable_txwm_we;
   logic event_enable_ready_qs;
   logic event_enable_ready_wd;
+  logic event_enable_ready_we;
   logic event_enable_idle_qs;
   logic event_enable_idle_wd;
+  logic event_enable_idle_we;
 
   // Register instances
   // R[intr_state]: V(False)
+
   //   F[error]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_error (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_error_we),
     .wd     (intr_state_error_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.error.de),
-    .d      (hw2reg.intr_state.error.d),
+    .d      (hw2reg.intr_state.error.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.error.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.error.q ),
 
     // to register interface (read)
     .qs     (intr_state_error_qs)
   );
 
+
   //   F[spi_event]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_spi_event (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_spi_event_we),
     .wd     (intr_state_spi_event_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.spi_event.de),
-    .d      (hw2reg.intr_state.spi_event.d),
+    .d      (hw2reg.intr_state.spi_event.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.spi_event.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.spi_event.q ),
 
     // to register interface (read)
     .qs     (intr_state_spi_event_qs)
@@ -333,53 +321,53 @@ module spi_host_reg_top (
 
 
   // R[intr_enable]: V(False)
+
   //   F[error]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_error (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_error_we),
     .wd     (intr_enable_error_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.error.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.error.q ),
 
     // to register interface (read)
     .qs     (intr_enable_error_qs)
   );
 
+
   //   F[spi_event]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_spi_event (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_spi_event_we),
     .wd     (intr_enable_spi_event_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.spi_event.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.spi_event.q ),
 
     // to register interface (read)
     .qs     (intr_enable_spi_event_qs)
@@ -387,46 +375,39 @@ module spi_host_reg_top (
 
 
   // R[intr_test]: V(True)
-  logic intr_test_qe;
-  logic [1:0] intr_test_flds_we;
-  assign intr_test_qe = &intr_test_flds_we;
+
   //   F[error]: 0:0
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_error (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_error_we),
     .wd     (intr_test_error_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[0]),
-    .q      (reg2hw.intr_test.error.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.error.qe),
+    .q      (reg2hw.intr_test.error.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.error.qe = intr_test_qe;
+
 
   //   F[spi_event]: 1:1
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_spi_event (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_spi_event_we),
     .wd     (intr_test_spi_event_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[1]),
-    .q      (reg2hw.intr_test.spi_event.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.spi_event.qe),
+    .q      (reg2hw.intr_test.spi_event.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.spi_event.qe = intr_test_qe;
 
 
   // R[alert_test]: V(True)
-  logic alert_test_qe;
-  logic [0:0] alert_test_flds_we;
-  assign alert_test_qe = &alert_test_flds_we;
+
   prim_subreg_ext #(
     .DW    (1)
   ) u_alert_test (
@@ -435,140 +416,138 @@ module spi_host_reg_top (
     .wd     (alert_test_wd),
     .d      ('0),
     .qre    (),
-    .qe     (alert_test_flds_we[0]),
-    .q      (reg2hw.alert_test.q),
-    .ds     (),
+    .qe     (reg2hw.alert_test.qe),
+    .q      (reg2hw.alert_test.q ),
     .qs     ()
   );
-  assign reg2hw.alert_test.qe = alert_test_qe;
 
 
   // R[control]: V(False)
+
   //   F[rx_watermark]: 7:0
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (8'h7f)
   ) u_control_rx_watermark (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_rx_watermark_we),
     .wd     (control_rx_watermark_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.rx_watermark.q),
-    .ds     (),
+    .q      (reg2hw.control.rx_watermark.q ),
 
     // to register interface (read)
     .qs     (control_rx_watermark_qs)
   );
 
+
   //   F[tx_watermark]: 15:8
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (8'h0)
   ) u_control_tx_watermark (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_tx_watermark_we),
     .wd     (control_tx_watermark_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.tx_watermark.q),
-    .ds     (),
+    .q      (reg2hw.control.tx_watermark.q ),
 
     // to register interface (read)
     .qs     (control_tx_watermark_qs)
   );
 
+
   //   F[output_en]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_control_output_en (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_output_en_we),
     .wd     (control_output_en_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.output_en.q),
-    .ds     (),
+    .q      (reg2hw.control.output_en.q ),
 
     // to register interface (read)
     .qs     (control_output_en_qs)
   );
 
+
   //   F[sw_rst]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_control_sw_rst (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_sw_rst_we),
     .wd     (control_sw_rst_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.sw_rst.q),
-    .ds     (),
+    .q      (reg2hw.control.sw_rst.q ),
 
     // to register interface (read)
     .qs     (control_sw_rst_qs)
   );
 
+
   //   F[spien]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_control_spien (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (control_we),
+    .we     (control_spien_we),
     .wd     (control_spien_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.control.spien.q),
-    .ds     (),
+    .q      (reg2hw.control.spien.q ),
 
     // to register interface (read)
     .qs     (control_spien_qs)
@@ -576,564 +555,738 @@ module spi_host_reg_top (
 
 
   // R[status]: V(False)
+
   //   F[txqd]: 7:0
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (8'h0)
   ) u_status_txqd (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txqd.de),
-    .d      (hw2reg.status.txqd.d),
+    .d      (hw2reg.status.txqd.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_txqd_qs)
   );
 
+
   //   F[rxqd]: 15:8
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (8'h0)
   ) u_status_rxqd (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxqd.de),
-    .d      (hw2reg.status.rxqd.d),
+    .d      (hw2reg.status.rxqd.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_rxqd_qs)
   );
 
+
   //   F[cmdqd]: 19:16
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (4'h0)
   ) u_status_cmdqd (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.cmdqd.de),
-    .d      (hw2reg.status.cmdqd.d),
+    .d      (hw2reg.status.cmdqd.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_cmdqd_qs)
   );
 
+
   //   F[rxwm]: 20:20
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxwm.de),
-    .d      (hw2reg.status.rxwm.d),
+    .d      (hw2reg.status.rxwm.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_rxwm_qs)
   );
 
+
   //   F[byteorder]: 22:22
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_byteorder (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.byteorder.de),
-    .d      (hw2reg.status.byteorder.d),
+    .d      (hw2reg.status.byteorder.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_byteorder_qs)
   );
 
+
   //   F[rxstall]: 23:23
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxstall (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxstall.de),
-    .d      (hw2reg.status.rxstall.d),
+    .d      (hw2reg.status.rxstall.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_rxstall_qs)
   );
 
+
   //   F[rxempty]: 24:24
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxempty (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxempty.de),
-    .d      (hw2reg.status.rxempty.d),
+    .d      (hw2reg.status.rxempty.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_rxempty_qs)
   );
 
+
   //   F[rxfull]: 25:25
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_rxfull (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.rxfull.de),
-    .d      (hw2reg.status.rxfull.d),
+    .d      (hw2reg.status.rxfull.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_rxfull_qs)
   );
 
+
   //   F[txwm]: 26:26
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txwm.de),
-    .d      (hw2reg.status.txwm.d),
+    .d      (hw2reg.status.txwm.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_txwm_qs)
   );
 
+
   //   F[txstall]: 27:27
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txstall (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txstall.de),
-    .d      (hw2reg.status.txstall.d),
+    .d      (hw2reg.status.txstall.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_txstall_qs)
   );
 
+
   //   F[txempty]: 28:28
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txempty (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txempty.de),
-    .d      (hw2reg.status.txempty.d),
+    .d      (hw2reg.status.txempty.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_txempty_qs)
   );
 
+
   //   F[txfull]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_txfull (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.txfull.de),
-    .d      (hw2reg.status.txfull.d),
+    .d      (hw2reg.status.txfull.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_txfull_qs)
   );
 
+
   //   F[active]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_active (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.active.de),
-    .d      (hw2reg.status.active.d),
+    .d      (hw2reg.status.active.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_active_qs)
   );
 
+
   //   F[ready]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
   ) u_status_ready (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
     .we     (1'b0),
-    .wd     ('0),
+    .wd     ('0  ),
 
     // from internal hardware
     .de     (hw2reg.status.ready.de),
-    .d      (hw2reg.status.ready.d),
+    .d      (hw2reg.status.ready.d ),
 
     // to internal hardware
     .qe     (),
     .q      (),
-    .ds     (),
 
     // to register interface (read)
     .qs     (status_ready_qs)
   );
 
 
+
   // Subregister 0 of Multireg configopts
-  // R[configopts]: V(False)
-  //   F[clkdiv_0]: 15:0
+  // R[configopts_0]: V(False)
+
+  // F[clkdiv_0]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
-  ) u_configopts_clkdiv_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_clkdiv_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_clkdiv_0_wd),
+    .we     (configopts_0_clkdiv_0_we),
+    .wd     (configopts_0_clkdiv_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].clkdiv.q),
-    .ds     (),
+    .q      (reg2hw.configopts[0].clkdiv.q ),
 
     // to register interface (read)
-    .qs     (configopts_clkdiv_0_qs)
+    .qs     (configopts_0_clkdiv_0_qs)
   );
 
-  //   F[csnidle_0]: 19:16
+
+  // F[csnidle_0]: 19:16
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csnidle_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_csnidle_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_csnidle_0_wd),
+    .we     (configopts_0_csnidle_0_we),
+    .wd     (configopts_0_csnidle_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].csnidle.q),
-    .ds     (),
+    .q      (reg2hw.configopts[0].csnidle.q ),
 
     // to register interface (read)
-    .qs     (configopts_csnidle_0_qs)
+    .qs     (configopts_0_csnidle_0_qs)
   );
 
-  //   F[csntrail_0]: 23:20
+
+  // F[csntrail_0]: 23:20
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csntrail_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_csntrail_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_csntrail_0_wd),
+    .we     (configopts_0_csntrail_0_we),
+    .wd     (configopts_0_csntrail_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].csntrail.q),
-    .ds     (),
+    .q      (reg2hw.configopts[0].csntrail.q ),
 
     // to register interface (read)
-    .qs     (configopts_csntrail_0_qs)
+    .qs     (configopts_0_csntrail_0_qs)
   );
 
-  //   F[csnlead_0]: 27:24
+
+  // F[csnlead_0]: 27:24
   prim_subreg #(
     .DW      (4),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (4'h0)
-  ) u_configopts_csnlead_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_csnlead_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_csnlead_0_wd),
+    .we     (configopts_0_csnlead_0_we),
+    .wd     (configopts_0_csnlead_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].csnlead.q),
-    .ds     (),
+    .q      (reg2hw.configopts[0].csnlead.q ),
 
     // to register interface (read)
-    .qs     (configopts_csnlead_0_qs)
+    .qs     (configopts_0_csnlead_0_qs)
   );
 
-  //   F[fullcyc_0]: 29:29
+
+  // F[fullcyc_0]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_fullcyc_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_fullcyc_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_fullcyc_0_wd),
+    .we     (configopts_0_fullcyc_0_we),
+    .wd     (configopts_0_fullcyc_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].fullcyc.q),
-    .ds     (),
+    .q      (reg2hw.configopts[0].fullcyc.q ),
 
     // to register interface (read)
-    .qs     (configopts_fullcyc_0_qs)
+    .qs     (configopts_0_fullcyc_0_qs)
   );
 
-  //   F[cpha_0]: 30:30
+
+  // F[cpha_0]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_cpha_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_cpha_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_cpha_0_wd),
+    .we     (configopts_0_cpha_0_we),
+    .wd     (configopts_0_cpha_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].cpha.q),
-    .ds     (),
+    .q      (reg2hw.configopts[0].cpha.q ),
 
     // to register interface (read)
-    .qs     (configopts_cpha_0_qs)
+    .qs     (configopts_0_cpha_0_qs)
   );
 
-  //   F[cpol_0]: 31:31
+
+  // F[cpol_0]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
-  ) u_configopts_cpol_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_configopts_0_cpol_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (configopts_we),
-    .wd     (configopts_cpol_0_wd),
+    .we     (configopts_0_cpol_0_we),
+    .wd     (configopts_0_cpol_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[0].cpol.q ),
+
+    // to register interface (read)
+    .qs     (configopts_0_cpol_0_qs)
+  );
+
+
+  // Subregister 1 of Multireg configopts
+  // R[configopts_1]: V(False)
+
+  // F[clkdiv_1]: 15:0
+  prim_subreg #(
+    .DW      (16),
+    .SWACCESS("RW"),
+    .RESVAL  (16'h0)
+  ) u_configopts_1_clkdiv_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_clkdiv_1_we),
+    .wd     (configopts_1_clkdiv_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].clkdiv.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_clkdiv_1_qs)
+  );
+
+
+  // F[csnidle_1]: 19:16
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csnidle_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csnidle_1_we),
+    .wd     (configopts_1_csnidle_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.configopts[0].cpol.q),
-    .ds     (),
+    .q      (reg2hw.configopts[1].csnidle.q ),
 
     // to register interface (read)
-    .qs     (configopts_cpol_0_qs)
+    .qs     (configopts_1_csnidle_1_qs)
   );
 
 
+  // F[csntrail_1]: 23:20
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csntrail_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csntrail_1_we),
+    .wd     (configopts_1_csntrail_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csntrail.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csntrail_1_qs)
+  );
+
+
+  // F[csnlead_1]: 27:24
+  prim_subreg #(
+    .DW      (4),
+    .SWACCESS("RW"),
+    .RESVAL  (4'h0)
+  ) u_configopts_1_csnlead_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_csnlead_1_we),
+    .wd     (configopts_1_csnlead_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].csnlead.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_csnlead_1_qs)
+  );
+
+
+  // F[fullcyc_1]: 29:29
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_fullcyc_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_fullcyc_1_we),
+    .wd     (configopts_1_fullcyc_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].fullcyc.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_fullcyc_1_qs)
+  );
+
+
+  // F[cpha_1]: 30:30
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_cpha_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_cpha_1_we),
+    .wd     (configopts_1_cpha_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].cpha.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_cpha_1_qs)
+  );
+
+
+  // F[cpol_1]: 31:31
+  prim_subreg #(
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_configopts_1_cpol_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
+
+    // from register interface
+    .we     (configopts_1_cpol_1_we),
+    .wd     (configopts_1_cpol_1_wd),
+
+    // from internal hardware
+    .de     (1'b0),
+    .d      ('0  ),
+
+    // to internal hardware
+    .qe     (),
+    .q      (reg2hw.configopts[1].cpol.q ),
+
+    // to register interface (read)
+    .qs     (configopts_1_cpol_1_qs)
+  );
+
+
+
   // R[csid]: V(False)
+
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_csid (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (csid_we),
@@ -1141,12 +1294,11 @@ module spi_host_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.csid.q),
-    .ds     (),
+    .q      (reg2hw.csid.q ),
 
     // to register interface (read)
     .qs     (csid_qs)
@@ -1154,200 +1306,193 @@ module spi_host_reg_top (
 
 
   // R[command]: V(True)
-  logic command_qe;
-  logic [3:0] command_flds_we;
-  assign command_qe = &command_flds_we;
+
   //   F[len]: 8:0
   prim_subreg_ext #(
     .DW    (9)
   ) u_command_len (
     .re     (1'b0),
-    .we     (command_we),
+    .we     (command_len_we),
     .wd     (command_len_wd),
     .d      ('0),
     .qre    (),
-    .qe     (command_flds_we[0]),
-    .q      (reg2hw.command.len.q),
-    .ds     (),
+    .qe     (reg2hw.command.len.qe),
+    .q      (reg2hw.command.len.q ),
     .qs     ()
   );
-  assign reg2hw.command.len.qe = command_qe;
+
 
   //   F[csaat]: 9:9
   prim_subreg_ext #(
     .DW    (1)
   ) u_command_csaat (
     .re     (1'b0),
-    .we     (command_we),
+    .we     (command_csaat_we),
     .wd     (command_csaat_wd),
     .d      ('0),
     .qre    (),
-    .qe     (command_flds_we[1]),
-    .q      (reg2hw.command.csaat.q),
-    .ds     (),
+    .qe     (reg2hw.command.csaat.qe),
+    .q      (reg2hw.command.csaat.q ),
     .qs     ()
   );
-  assign reg2hw.command.csaat.qe = command_qe;
+
 
   //   F[speed]: 11:10
   prim_subreg_ext #(
     .DW    (2)
   ) u_command_speed (
     .re     (1'b0),
-    .we     (command_we),
+    .we     (command_speed_we),
     .wd     (command_speed_wd),
     .d      ('0),
     .qre    (),
-    .qe     (command_flds_we[2]),
-    .q      (reg2hw.command.speed.q),
-    .ds     (),
+    .qe     (reg2hw.command.speed.qe),
+    .q      (reg2hw.command.speed.q ),
     .qs     ()
   );
-  assign reg2hw.command.speed.qe = command_qe;
+
 
   //   F[direction]: 13:12
   prim_subreg_ext #(
     .DW    (2)
   ) u_command_direction (
     .re     (1'b0),
-    .we     (command_we),
+    .we     (command_direction_we),
     .wd     (command_direction_wd),
     .d      ('0),
     .qre    (),
-    .qe     (command_flds_we[3]),
-    .q      (reg2hw.command.direction.q),
-    .ds     (),
+    .qe     (reg2hw.command.direction.qe),
+    .q      (reg2hw.command.direction.q ),
     .qs     ()
   );
-  assign reg2hw.command.direction.qe = command_qe;
 
 
   // R[error_enable]: V(False)
+
   //   F[cmdbusy]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_cmdbusy (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_cmdbusy_we),
     .wd     (error_enable_cmdbusy_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.cmdbusy.q),
-    .ds     (),
+    .q      (reg2hw.error_enable.cmdbusy.q ),
 
     // to register interface (read)
     .qs     (error_enable_cmdbusy_qs)
   );
 
+
   //   F[overflow]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_overflow_we),
     .wd     (error_enable_overflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.overflow.q),
-    .ds     (),
+    .q      (reg2hw.error_enable.overflow.q ),
 
     // to register interface (read)
     .qs     (error_enable_overflow_qs)
   );
 
+
   //   F[underflow]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_underflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_underflow_we),
     .wd     (error_enable_underflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.underflow.q),
-    .ds     (),
+    .q      (reg2hw.error_enable.underflow.q ),
 
     // to register interface (read)
     .qs     (error_enable_underflow_qs)
   );
 
+
   //   F[cmdinval]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_cmdinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_cmdinval_we),
     .wd     (error_enable_cmdinval_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.cmdinval.q),
-    .ds     (),
+    .q      (reg2hw.error_enable.cmdinval.q ),
 
     // to register interface (read)
     .qs     (error_enable_cmdinval_qs)
   );
 
+
   //   F[csidinval]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h1)
   ) u_error_enable_csidinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_enable_we),
+    .we     (error_enable_csidinval_we),
     .wd     (error_enable_csidinval_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_enable.csidinval.q),
-    .ds     (),
+    .q      (reg2hw.error_enable.csidinval.q ),
 
     // to register interface (read)
     .qs     (error_enable_csidinval_qs)
@@ -1355,157 +1500,157 @@ module spi_host_reg_top (
 
 
   // R[error_status]: V(False)
+
   //   F[cmdbusy]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_cmdbusy (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_cmdbusy_we),
     .wd     (error_status_cmdbusy_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.cmdbusy.de),
-    .d      (hw2reg.error_status.cmdbusy.d),
+    .d      (hw2reg.error_status.cmdbusy.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.cmdbusy.q),
-    .ds     (),
+    .q      (reg2hw.error_status.cmdbusy.q ),
 
     // to register interface (read)
     .qs     (error_status_cmdbusy_qs)
   );
 
+
   //   F[overflow]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_overflow_we),
     .wd     (error_status_overflow_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.overflow.de),
-    .d      (hw2reg.error_status.overflow.d),
+    .d      (hw2reg.error_status.overflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.overflow.q),
-    .ds     (),
+    .q      (reg2hw.error_status.overflow.q ),
 
     // to register interface (read)
     .qs     (error_status_overflow_qs)
   );
 
+
   //   F[underflow]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_underflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_underflow_we),
     .wd     (error_status_underflow_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.underflow.de),
-    .d      (hw2reg.error_status.underflow.d),
+    .d      (hw2reg.error_status.underflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.underflow.q),
-    .ds     (),
+    .q      (reg2hw.error_status.underflow.q ),
 
     // to register interface (read)
     .qs     (error_status_underflow_qs)
   );
 
+
   //   F[cmdinval]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_cmdinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_cmdinval_we),
     .wd     (error_status_cmdinval_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.cmdinval.de),
-    .d      (hw2reg.error_status.cmdinval.d),
+    .d      (hw2reg.error_status.cmdinval.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.cmdinval.q),
-    .ds     (),
+    .q      (reg2hw.error_status.cmdinval.q ),
 
     // to register interface (read)
     .qs     (error_status_cmdinval_qs)
   );
 
+
   //   F[csidinval]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_csidinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_csidinval_we),
     .wd     (error_status_csidinval_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.csidinval.de),
-    .d      (hw2reg.error_status.csidinval.d),
+    .d      (hw2reg.error_status.csidinval.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.csidinval.q),
-    .ds     (),
+    .q      (reg2hw.error_status.csidinval.q ),
 
     // to register interface (read)
     .qs     (error_status_csidinval_qs)
   );
 
+
   //   F[accessinval]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_error_status_accessinval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (error_status_we),
+    .we     (error_status_accessinval_we),
     .wd     (error_status_accessinval_wd),
 
     // from internal hardware
     .de     (hw2reg.error_status.accessinval.de),
-    .d      (hw2reg.error_status.accessinval.d),
+    .d      (hw2reg.error_status.accessinval.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.error_status.accessinval.q),
-    .ds     (),
+    .q      (reg2hw.error_status.accessinval.q ),
 
     // to register interface (read)
     .qs     (error_status_accessinval_qs)
@@ -1513,157 +1658,157 @@ module spi_host_reg_top (
 
 
   // R[event_enable]: V(False)
+
   //   F[rxfull]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_rxfull (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_rxfull_we),
     .wd     (event_enable_rxfull_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.rxfull.q),
-    .ds     (),
+    .q      (reg2hw.event_enable.rxfull.q ),
 
     // to register interface (read)
     .qs     (event_enable_rxfull_qs)
   );
 
+
   //   F[txempty]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_txempty (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_txempty_we),
     .wd     (event_enable_txempty_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.txempty.q),
-    .ds     (),
+    .q      (reg2hw.event_enable.txempty.q ),
 
     // to register interface (read)
     .qs     (event_enable_txempty_qs)
   );
 
+
   //   F[rxwm]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_rxwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_rxwm_we),
     .wd     (event_enable_rxwm_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.rxwm.q),
-    .ds     (),
+    .q      (reg2hw.event_enable.rxwm.q ),
 
     // to register interface (read)
     .qs     (event_enable_rxwm_qs)
   );
 
+
   //   F[txwm]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_txwm (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_txwm_we),
     .wd     (event_enable_txwm_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.txwm.q),
-    .ds     (),
+    .q      (reg2hw.event_enable.txwm.q ),
 
     // to register interface (read)
     .qs     (event_enable_txwm_qs)
   );
 
+
   //   F[ready]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_ready (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_ready_we),
     .wd     (event_enable_ready_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.ready.q),
-    .ds     (),
+    .q      (reg2hw.event_enable.ready.q ),
 
     // to register interface (read)
     .qs     (event_enable_ready_qs)
   );
 
+
   //   F[idle]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_event_enable_idle (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (event_enable_we),
+    .we     (event_enable_idle_we),
     .wd     (event_enable_idle_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.event_enable.idle.q),
-    .ds     (),
+    .q      (reg2hw.event_enable.idle.q ),
 
     // to register interface (read)
     .qs     (event_enable_idle_qs)
@@ -1671,7 +1816,8 @@ module spi_host_reg_top (
 
 
 
-  logic [11:0] addr_hit;
+
+  logic [12:0] addr_hit;
   always_comb begin
     addr_hit = '0;
     addr_hit[ 0] = (reg_addr == SPI_HOST_INTR_STATE_OFFSET);
@@ -1680,12 +1826,13 @@ module spi_host_reg_top (
     addr_hit[ 3] = (reg_addr == SPI_HOST_ALERT_TEST_OFFSET);
     addr_hit[ 4] = (reg_addr == SPI_HOST_CONTROL_OFFSET);
     addr_hit[ 5] = (reg_addr == SPI_HOST_STATUS_OFFSET);
-    addr_hit[ 6] = (reg_addr == SPI_HOST_CONFIGOPTS_OFFSET);
-    addr_hit[ 7] = (reg_addr == SPI_HOST_CSID_OFFSET);
-    addr_hit[ 8] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
-    addr_hit[ 9] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
-    addr_hit[10] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
-    addr_hit[11] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
+    addr_hit[ 6] = (reg_addr == SPI_HOST_CONFIGOPTS_0_OFFSET);
+    addr_hit[ 7] = (reg_addr == SPI_HOST_CONFIGOPTS_1_OFFSET);
+    addr_hit[ 8] = (reg_addr == SPI_HOST_CSID_OFFSET);
+    addr_hit[ 9] = (reg_addr == SPI_HOST_COMMAND_OFFSET);
+    addr_hit[10] = (reg_addr == SPI_HOST_ERROR_ENABLE_OFFSET);
+    addr_hit[11] = (reg_addr == SPI_HOST_ERROR_STATUS_OFFSET);
+    addr_hit[12] = (reg_addr == SPI_HOST_EVENT_ENABLE_OFFSET);
   end
 
   assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
@@ -1704,121 +1851,154 @@ module spi_host_reg_top (
                (addr_hit[ 8] & (|(SPI_HOST_PERMIT[ 8] & ~reg_be))) |
                (addr_hit[ 9] & (|(SPI_HOST_PERMIT[ 9] & ~reg_be))) |
                (addr_hit[10] & (|(SPI_HOST_PERMIT[10] & ~reg_be))) |
-               (addr_hit[11] & (|(SPI_HOST_PERMIT[11] & ~reg_be)))));
+               (addr_hit[11] & (|(SPI_HOST_PERMIT[11] & ~reg_be))) |
+               (addr_hit[12] & (|(SPI_HOST_PERMIT[12] & ~reg_be)))));
   end
 
-  // Generate write-enables
-  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;
-
+  assign intr_state_error_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_error_wd = reg_wdata[0];
 
+  assign intr_state_spi_event_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_spi_event_wd = reg_wdata[1];
-  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;
 
+  assign intr_enable_error_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_error_wd = reg_wdata[0];
 
+  assign intr_enable_spi_event_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_spi_event_wd = reg_wdata[1];
-  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;
 
+  assign intr_test_error_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_error_wd = reg_wdata[0];
 
+  assign intr_test_spi_event_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_spi_event_wd = reg_wdata[1];
-  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
 
+  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
   assign alert_test_wd = reg_wdata[0];
-  assign control_we = addr_hit[4] & reg_we & !reg_error;
 
+  assign control_rx_watermark_we = addr_hit[4] & reg_we & !reg_error;
   assign control_rx_watermark_wd = reg_wdata[7:0];
 
+  assign control_tx_watermark_we = addr_hit[4] & reg_we & !reg_error;
   assign control_tx_watermark_wd = reg_wdata[15:8];
 
+  assign control_output_en_we = addr_hit[4] & reg_we & !reg_error;
   assign control_output_en_wd = reg_wdata[29];
 
+  assign control_sw_rst_we = addr_hit[4] & reg_we & !reg_error;
   assign control_sw_rst_wd = reg_wdata[30];
 
+  assign control_spien_we = addr_hit[4] & reg_we & !reg_error;
   assign control_spien_wd = reg_wdata[31];
-  assign configopts_we = addr_hit[6] & reg_we & !reg_error;
 
-  assign configopts_clkdiv_0_wd = reg_wdata[15:0];
+  assign configopts_0_clkdiv_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_clkdiv_0_wd = reg_wdata[15:0];
+
+  assign configopts_0_csnidle_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csnidle_0_wd = reg_wdata[19:16];
 
-  assign configopts_csnidle_0_wd = reg_wdata[19:16];
+  assign configopts_0_csntrail_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csntrail_0_wd = reg_wdata[23:20];
 
-  assign configopts_csntrail_0_wd = reg_wdata[23:20];
+  assign configopts_0_csnlead_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_csnlead_0_wd = reg_wdata[27:24];
 
-  assign configopts_csnlead_0_wd = reg_wdata[27:24];
+  assign configopts_0_fullcyc_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_fullcyc_0_wd = reg_wdata[29];
 
-  assign configopts_fullcyc_0_wd = reg_wdata[29];
+  assign configopts_0_cpha_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_cpha_0_wd = reg_wdata[30];
 
-  assign configopts_cpha_0_wd = reg_wdata[30];
+  assign configopts_0_cpol_0_we = addr_hit[6] & reg_we & !reg_error;
+  assign configopts_0_cpol_0_wd = reg_wdata[31];
 
-  assign configopts_cpol_0_wd = reg_wdata[31];
-  assign csid_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_clkdiv_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_clkdiv_1_wd = reg_wdata[15:0];
 
+  assign configopts_1_csnidle_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csnidle_1_wd = reg_wdata[19:16];
+
+  assign configopts_1_csntrail_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csntrail_1_wd = reg_wdata[23:20];
+
+  assign configopts_1_csnlead_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_csnlead_1_wd = reg_wdata[27:24];
+
+  assign configopts_1_fullcyc_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_fullcyc_1_wd = reg_wdata[29];
+
+  assign configopts_1_cpha_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_cpha_1_wd = reg_wdata[30];
+
+  assign configopts_1_cpol_1_we = addr_hit[7] & reg_we & !reg_error;
+  assign configopts_1_cpol_1_wd = reg_wdata[31];
+
+  assign csid_we = addr_hit[8] & reg_we & !reg_error;
   assign csid_wd = reg_wdata[31:0];
-  assign command_we = addr_hit[8] & reg_we & !reg_error;
 
+  assign command_len_we = addr_hit[9] & reg_we & !reg_error;
   assign command_len_wd = reg_wdata[8:0];
 
+  assign command_csaat_we = addr_hit[9] & reg_we & !reg_error;
   assign command_csaat_wd = reg_wdata[9];
 
+  assign command_speed_we = addr_hit[9] & reg_we & !reg_error;
   assign command_speed_wd = reg_wdata[11:10];
 
+  assign command_direction_we = addr_hit[9] & reg_we & !reg_error;
   assign command_direction_wd = reg_wdata[13:12];
-  assign error_enable_we = addr_hit[9] & reg_we & !reg_error;
 
+  assign error_enable_cmdbusy_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdbusy_wd = reg_wdata[0];
 
+  assign error_enable_overflow_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_overflow_wd = reg_wdata[1];
 
+  assign error_enable_underflow_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_underflow_wd = reg_wdata[2];
 
+  assign error_enable_cmdinval_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_cmdinval_wd = reg_wdata[3];
 
+  assign error_enable_csidinval_we = addr_hit[10] & reg_we & !reg_error;
   assign error_enable_csidinval_wd = reg_wdata[4];
-  assign error_status_we = addr_hit[10] & reg_we & !reg_error;
 
+  assign error_status_cmdbusy_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_cmdbusy_wd = reg_wdata[0];
 
+  assign error_status_overflow_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_overflow_wd = reg_wdata[1];
 
+  assign error_status_underflow_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_underflow_wd = reg_wdata[2];
 
+  assign error_status_cmdinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_cmdinval_wd = reg_wdata[3];
 
+  assign error_status_csidinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_csidinval_wd = reg_wdata[4];
 
+  assign error_status_accessinval_we = addr_hit[11] & reg_we & !reg_error;
   assign error_status_accessinval_wd = reg_wdata[5];
-  assign event_enable_we = addr_hit[11] & reg_we & !reg_error;
 
+  assign event_enable_rxfull_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_rxfull_wd = reg_wdata[0];
 
+  assign event_enable_txempty_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_txempty_wd = reg_wdata[1];
 
+  assign event_enable_rxwm_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_rxwm_wd = reg_wdata[2];
 
+  assign event_enable_txwm_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_txwm_wd = reg_wdata[3];
 
+  assign event_enable_ready_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_ready_wd = reg_wdata[4];
 
+  assign event_enable_idle_we = addr_hit[12] & reg_we & !reg_error;
   assign event_enable_idle_wd = reg_wdata[5];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = control_we;
-    reg_we_check[5] = 1'b0;
-    reg_we_check[6] = configopts_we;
-    reg_we_check[7] = csid_we;
-    reg_we_check[8] = command_we;
-    reg_we_check[9] = error_enable_we;
-    reg_we_check[10] = error_status_we;
-    reg_we_check[11] = event_enable_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
@@ -1868,27 +2048,37 @@ module spi_host_reg_top (
       end
 
       addr_hit[6]: begin
-        reg_rdata_next[15:0] = configopts_clkdiv_0_qs;
-        reg_rdata_next[19:16] = configopts_csnidle_0_qs;
-        reg_rdata_next[23:20] = configopts_csntrail_0_qs;
-        reg_rdata_next[27:24] = configopts_csnlead_0_qs;
-        reg_rdata_next[29] = configopts_fullcyc_0_qs;
-        reg_rdata_next[30] = configopts_cpha_0_qs;
-        reg_rdata_next[31] = configopts_cpol_0_qs;
+        reg_rdata_next[15:0] = configopts_0_clkdiv_0_qs;
+        reg_rdata_next[19:16] = configopts_0_csnidle_0_qs;
+        reg_rdata_next[23:20] = configopts_0_csntrail_0_qs;
+        reg_rdata_next[27:24] = configopts_0_csnlead_0_qs;
+        reg_rdata_next[29] = configopts_0_fullcyc_0_qs;
+        reg_rdata_next[30] = configopts_0_cpha_0_qs;
+        reg_rdata_next[31] = configopts_0_cpol_0_qs;
       end
 
       addr_hit[7]: begin
-        reg_rdata_next[31:0] = csid_qs;
+        reg_rdata_next[15:0] = configopts_1_clkdiv_1_qs;
+        reg_rdata_next[19:16] = configopts_1_csnidle_1_qs;
+        reg_rdata_next[23:20] = configopts_1_csntrail_1_qs;
+        reg_rdata_next[27:24] = configopts_1_csnlead_1_qs;
+        reg_rdata_next[29] = configopts_1_fullcyc_1_qs;
+        reg_rdata_next[30] = configopts_1_cpha_1_qs;
+        reg_rdata_next[31] = configopts_1_cpol_1_qs;
       end
 
       addr_hit[8]: begin
+        reg_rdata_next[31:0] = csid_qs;
+      end
+
+      addr_hit[9]: begin
         reg_rdata_next[8:0] = '0;
         reg_rdata_next[9] = '0;
         reg_rdata_next[11:10] = '0;
         reg_rdata_next[13:12] = '0;
       end
 
-      addr_hit[9]: begin
+      addr_hit[10]: begin
         reg_rdata_next[0] = error_enable_cmdbusy_qs;
         reg_rdata_next[1] = error_enable_overflow_qs;
         reg_rdata_next[2] = error_enable_underflow_qs;
@@ -1896,7 +2086,7 @@ module spi_host_reg_top (
         reg_rdata_next[4] = error_enable_csidinval_qs;
       end
 
-      addr_hit[10]: begin
+      addr_hit[11]: begin
         reg_rdata_next[0] = error_status_cmdbusy_qs;
         reg_rdata_next[1] = error_status_overflow_qs;
         reg_rdata_next[2] = error_status_underflow_qs;
@@ -1905,7 +2095,7 @@ module spi_host_reg_top (
         reg_rdata_next[5] = error_status_accessinval_qs;
       end
 
-      addr_hit[11]: begin
+      addr_hit[12]: begin
         reg_rdata_next[0] = event_enable_rxfull_qs;
         reg_rdata_next[1] = event_enable_txempty_qs;
         reg_rdata_next[2] = event_enable_rxwm_qs;
@@ -1920,13 +2110,6 @@ module spi_host_reg_top (
     endcase
   end
 
-  // shadow busy
-  logic shadow_busy;
-  assign shadow_busy = 1'b0;
-
-  // register busy
-  assign reg_busy = shadow_busy;
-
   // Unused signal tieoff
 
   // wdata / byte enable are not always fully used
@@ -1937,15 +2120,68 @@ module spi_host_reg_top (
   assign unused_be = ^reg_be;
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
-  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)
+endmodule
 
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)
+module spi_host_reg_top_intf
+#(
+  parameter int AW = 6,
+  localparam int DW = 32
+) (
+  input logic clk_i,
+  input logic rst_ni,
+  REG_BUS.in  regbus_slave,
+  REG_BUS.out  regbus_win_mst[2-1:0],
+  // To HW
+  output spi_host_reg_pkg::spi_host_reg2hw_t reg2hw, // Write
+  input  spi_host_reg_pkg::spi_host_hw2reg_t hw2reg, // Read
+  // Config
+  input devmode_i // If 1, explicit error return for unmapped register access
+);
+ localparam int unsigned STRB_WIDTH = DW/8;
+
+`include "register_interface/typedef.svh"
+`include "register_interface/assign.svh"
+
+  // Define structs for reg_bus
+  typedef logic [AW-1:0] addr_t;
+  typedef logic [DW-1:0] data_t;
+  typedef logic [STRB_WIDTH-1:0] strb_t;
+  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)
+
+  reg_bus_req_t s_reg_req;
+  reg_bus_rsp_t s_reg_rsp;
+  
+  // Assign SV interface to structs
+  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
+  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)
+
+  reg_bus_req_t s_reg_win_req[2-1:0];
+  reg_bus_rsp_t s_reg_win_rsp[2-1:0];
+  for (genvar i = 0; i < 2; i++) begin : gen_assign_window_structs
+    `REG_BUS_ASSIGN_TO_REQ(s_reg_win_req[i], regbus_win_mst[i])
+    `REG_BUS_ASSIGN_FROM_RSP(regbus_win_mst[i], s_reg_win_rsp[i])
+  end
+  
+  
+
+  spi_host_reg_top #(
+    .reg_req_t(reg_bus_req_t),
+    .reg_rsp_t(reg_bus_rsp_t),
+    .AW(AW)
+  ) i_regs (
+    .clk_i,
+    .rst_ni,
+    .reg_req_i(s_reg_req),
+    .reg_rsp_o(s_reg_rsp),
+    .reg_req_win_o(s_reg_win_req),
+    .reg_rsp_win_i(s_reg_win_rsp),
+    .reg2hw, // Write
+    .hw2reg, // Read
+    .devmode_i
+  );
+  
+endmodule
 
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
 
-endmodule
-- 
2.16.5

