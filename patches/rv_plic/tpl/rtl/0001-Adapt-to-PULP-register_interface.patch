From c16fdfeea7540bad5efb8ff387cecf19eb35ae9f Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Sun, 19 Feb 2023 13:15:50 +0100
Subject: [PATCH] Adapt to PULP register_interface

---
 rv_plic.sv.tpl        | 56 +++++++++++----------------------------------------
 rv_plic_target.sv.tpl |  2 +-
 2 files changed, 13 insertions(+), 45 deletions(-)

diff --git a/rv_plic.sv.tpl b/rv_plic.sv.tpl
index c0592e203..9ca2c15c5 100644
--- a/rv_plic.sv.tpl
+++ b/rv_plic.sv.tpl
@@ -14,8 +14,11 @@
 // Verilog parameter
 //   MAX_PRIO: Maximum value of interrupt priority
 
+`include "common_cells/assertions.svh"
+
 module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn  = {NumAlerts{1'b1}},
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic,
   // OpenTitan IP standardizes on level triggered interrupts,
   // hence LevelEdgeTrig is set to all-zeroes by default.
   // Note that in case of edge-triggered interrupts, CDC handling is not
@@ -29,16 +32,12 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
   input     rst_ni,
 
   // Bus Interface (device)
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Interrupt Sources
   input  [NumSrc-1:0] intr_src_i,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Interrupt notification to targets
   output [NumTarget-1:0] irq_o,
   output [SRCW-1:0]      irq_id_o [NumTarget],
@@ -195,57 +194,28 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
     );
   end
 
-  ////////////
-  // Alerts //
-  ////////////
-
-  logic [NumAlerts-1:0] alert_test, alerts;
-
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[i]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   ////////////////////////
   // Register interface //
   ////////////////////////
   //  Limitation of register tool prevents the module from having flexibility to parameters
   //  So, signals are manually tied at the top.
-  ${module_instance_name}_reg_top u_reg (
+  ${module_instance_name}_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
 
-    .tl_i,
-    .tl_o,
+    .reg_req_i,
+    .reg_rsp_o,
 
     .reg2hw,
     .hw2reg,
 
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o(alerts[0]),
-
     .devmode_i  (1'b1)
   );
 
   // Assertions
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
   `ASSERT_KNOWN(IrqKnownO_A, irq_o)
   `ASSERT_KNOWN(MsipKnownO_A, msip_o)
   for (genvar k = 0; k < NumTarget; k++) begin : gen_irq_id_known
@@ -255,6 +225,4 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
   // Assume
   `ASSUME(Irq0Tied_A, intr_src_i[0] == 1'b0)
 
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
diff --git a/rv_plic_target.sv.tpl b/rv_plic_target.sv.tpl
index d2280c5c7..5c4945e7c 100644
--- a/rv_plic_target.sv.tpl
+++ b/rv_plic_target.sv.tpl
@@ -12,7 +12,7 @@
 // many input sources.
 //
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module ${module_instance_name}_target #(
   parameter int N_SOURCE = 32,
-- 
2.16.5

