From f358a614cbbca5d94059f8ffeffaeabe146692c2 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Mon, 13 Feb 2023 23:59:56 +0100
Subject: [PATCH] regs: Regenerate

---
 rtl/i2c_reg_pkg.sv |    1 +
 rtl/i2c_reg_top.sv | 1708 +++++++++++++++++++++++++++-------------------------
 2 files changed, 883 insertions(+), 826 deletions(-)

diff --git a/rtl/i2c_reg_pkg.sv b/rtl/i2c_reg_pkg.sv
index 1df3e0b53..133af1292 100644
--- a/rtl/i2c_reg_pkg.sv
+++ b/rtl/i2c_reg_pkg.sv
@@ -627,3 +627,4 @@ package i2c_reg_pkg;
   };
 
 endpackage
+
diff --git a/rtl/i2c_reg_top.sv b/rtl/i2c_reg_top.sv
index a289c20a0..181e64def 100644
--- a/rtl/i2c_reg_top.sv
+++ b/rtl/i2c_reg_top.sv
@@ -4,19 +4,22 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
 
-module i2c_reg_top (
-  input clk_i,
-  input rst_ni,
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+`include "common_cells/assertions.svh"
+
+module i2c_reg_top #(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic,
+  parameter int AW = 7
+) (
+  input logic clk_i,
+  input logic rst_ni,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
   // To HW
   output i2c_reg_pkg::i2c_reg2hw_t reg2hw, // Write
   input  i2c_reg_pkg::i2c_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -24,7 +27,6 @@ module i2c_reg_top (
 
   import i2c_reg_pkg::* ;
 
-  localparam int AW = 7;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -40,654 +42,677 @@ module i2c_reg_top (
   logic          addrmiss, wr_err;
 
   logic [DW-1:0] reg_rdata_next;
-  logic reg_busy;
-
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
-
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [21:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(22)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o(tl_o)
-  );
 
-  assign tl_reg_h2d = tl_i;
-  assign tl_o_pre   = tl_reg_d2h;
+  // Below register interface can be changed
+  reg_req_t  reg_intf_req;
+  reg_rsp_t  reg_intf_rsp;
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
 
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
+  assign reg_intf_req = reg_req_i;
+  assign reg_rsp_o = reg_intf_rsp;
 
-    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
-    .intg_error_o(),
 
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .busy_i  (reg_busy),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
-
-  // cdc oversampling signals
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
-  logic intr_state_we;
   logic intr_state_fmt_threshold_qs;
   logic intr_state_fmt_threshold_wd;
+  logic intr_state_fmt_threshold_we;
   logic intr_state_rx_threshold_qs;
   logic intr_state_rx_threshold_wd;
+  logic intr_state_rx_threshold_we;
   logic intr_state_fmt_overflow_qs;
   logic intr_state_fmt_overflow_wd;
+  logic intr_state_fmt_overflow_we;
   logic intr_state_rx_overflow_qs;
   logic intr_state_rx_overflow_wd;
+  logic intr_state_rx_overflow_we;
   logic intr_state_nak_qs;
   logic intr_state_nak_wd;
+  logic intr_state_nak_we;
   logic intr_state_scl_interference_qs;
   logic intr_state_scl_interference_wd;
+  logic intr_state_scl_interference_we;
   logic intr_state_sda_interference_qs;
   logic intr_state_sda_interference_wd;
+  logic intr_state_sda_interference_we;
   logic intr_state_stretch_timeout_qs;
   logic intr_state_stretch_timeout_wd;
+  logic intr_state_stretch_timeout_we;
   logic intr_state_sda_unstable_qs;
   logic intr_state_sda_unstable_wd;
+  logic intr_state_sda_unstable_we;
   logic intr_state_cmd_complete_qs;
   logic intr_state_cmd_complete_wd;
+  logic intr_state_cmd_complete_we;
   logic intr_state_tx_stretch_qs;
+  logic intr_state_tx_stretch_wd;
+  logic intr_state_tx_stretch_we;
   logic intr_state_tx_overflow_qs;
   logic intr_state_tx_overflow_wd;
+  logic intr_state_tx_overflow_we;
   logic intr_state_acq_full_qs;
+  logic intr_state_acq_full_wd;
+  logic intr_state_acq_full_we;
   logic intr_state_unexp_stop_qs;
   logic intr_state_unexp_stop_wd;
+  logic intr_state_unexp_stop_we;
   logic intr_state_host_timeout_qs;
   logic intr_state_host_timeout_wd;
-  logic intr_enable_we;
+  logic intr_state_host_timeout_we;
   logic intr_enable_fmt_threshold_qs;
   logic intr_enable_fmt_threshold_wd;
+  logic intr_enable_fmt_threshold_we;
   logic intr_enable_rx_threshold_qs;
   logic intr_enable_rx_threshold_wd;
+  logic intr_enable_rx_threshold_we;
   logic intr_enable_fmt_overflow_qs;
   logic intr_enable_fmt_overflow_wd;
+  logic intr_enable_fmt_overflow_we;
   logic intr_enable_rx_overflow_qs;
   logic intr_enable_rx_overflow_wd;
+  logic intr_enable_rx_overflow_we;
   logic intr_enable_nak_qs;
   logic intr_enable_nak_wd;
+  logic intr_enable_nak_we;
   logic intr_enable_scl_interference_qs;
   logic intr_enable_scl_interference_wd;
+  logic intr_enable_scl_interference_we;
   logic intr_enable_sda_interference_qs;
   logic intr_enable_sda_interference_wd;
+  logic intr_enable_sda_interference_we;
   logic intr_enable_stretch_timeout_qs;
   logic intr_enable_stretch_timeout_wd;
+  logic intr_enable_stretch_timeout_we;
   logic intr_enable_sda_unstable_qs;
   logic intr_enable_sda_unstable_wd;
+  logic intr_enable_sda_unstable_we;
   logic intr_enable_cmd_complete_qs;
   logic intr_enable_cmd_complete_wd;
+  logic intr_enable_cmd_complete_we;
   logic intr_enable_tx_stretch_qs;
   logic intr_enable_tx_stretch_wd;
+  logic intr_enable_tx_stretch_we;
   logic intr_enable_tx_overflow_qs;
   logic intr_enable_tx_overflow_wd;
+  logic intr_enable_tx_overflow_we;
   logic intr_enable_acq_full_qs;
   logic intr_enable_acq_full_wd;
+  logic intr_enable_acq_full_we;
   logic intr_enable_unexp_stop_qs;
   logic intr_enable_unexp_stop_wd;
+  logic intr_enable_unexp_stop_we;
   logic intr_enable_host_timeout_qs;
   logic intr_enable_host_timeout_wd;
-  logic intr_test_we;
+  logic intr_enable_host_timeout_we;
   logic intr_test_fmt_threshold_wd;
+  logic intr_test_fmt_threshold_we;
   logic intr_test_rx_threshold_wd;
+  logic intr_test_rx_threshold_we;
   logic intr_test_fmt_overflow_wd;
+  logic intr_test_fmt_overflow_we;
   logic intr_test_rx_overflow_wd;
+  logic intr_test_rx_overflow_we;
   logic intr_test_nak_wd;
+  logic intr_test_nak_we;
   logic intr_test_scl_interference_wd;
+  logic intr_test_scl_interference_we;
   logic intr_test_sda_interference_wd;
+  logic intr_test_sda_interference_we;
   logic intr_test_stretch_timeout_wd;
+  logic intr_test_stretch_timeout_we;
   logic intr_test_sda_unstable_wd;
+  logic intr_test_sda_unstable_we;
   logic intr_test_cmd_complete_wd;
+  logic intr_test_cmd_complete_we;
   logic intr_test_tx_stretch_wd;
+  logic intr_test_tx_stretch_we;
   logic intr_test_tx_overflow_wd;
+  logic intr_test_tx_overflow_we;
   logic intr_test_acq_full_wd;
+  logic intr_test_acq_full_we;
   logic intr_test_unexp_stop_wd;
+  logic intr_test_unexp_stop_we;
   logic intr_test_host_timeout_wd;
-  logic alert_test_we;
+  logic intr_test_host_timeout_we;
   logic alert_test_wd;
-  logic ctrl_we;
+  logic alert_test_we;
   logic ctrl_enablehost_qs;
   logic ctrl_enablehost_wd;
+  logic ctrl_enablehost_we;
   logic ctrl_enabletarget_qs;
   logic ctrl_enabletarget_wd;
+  logic ctrl_enabletarget_we;
   logic ctrl_llpbk_qs;
   logic ctrl_llpbk_wd;
-  logic status_re;
+  logic ctrl_llpbk_we;
   logic status_fmtfull_qs;
+  logic status_fmtfull_re;
   logic status_rxfull_qs;
+  logic status_rxfull_re;
   logic status_fmtempty_qs;
+  logic status_fmtempty_re;
   logic status_hostidle_qs;
+  logic status_hostidle_re;
   logic status_targetidle_qs;
+  logic status_targetidle_re;
   logic status_rxempty_qs;
+  logic status_rxempty_re;
   logic status_txfull_qs;
+  logic status_txfull_re;
   logic status_acqfull_qs;
+  logic status_acqfull_re;
   logic status_txempty_qs;
+  logic status_txempty_re;
   logic status_acqempty_qs;
-  logic rdata_re;
+  logic status_acqempty_re;
   logic [7:0] rdata_qs;
-  logic fdata_we;
+  logic rdata_re;
   logic [7:0] fdata_fbyte_wd;
+  logic fdata_fbyte_we;
   logic fdata_start_wd;
+  logic fdata_start_we;
   logic fdata_stop_wd;
+  logic fdata_stop_we;
   logic fdata_read_wd;
+  logic fdata_read_we;
   logic fdata_rcont_wd;
+  logic fdata_rcont_we;
   logic fdata_nakok_wd;
-  logic fifo_ctrl_we;
+  logic fdata_nakok_we;
   logic fifo_ctrl_rxrst_wd;
+  logic fifo_ctrl_rxrst_we;
   logic fifo_ctrl_fmtrst_wd;
+  logic fifo_ctrl_fmtrst_we;
   logic [2:0] fifo_ctrl_rxilvl_qs;
   logic [2:0] fifo_ctrl_rxilvl_wd;
+  logic fifo_ctrl_rxilvl_we;
   logic [1:0] fifo_ctrl_fmtilvl_qs;
   logic [1:0] fifo_ctrl_fmtilvl_wd;
+  logic fifo_ctrl_fmtilvl_we;
   logic fifo_ctrl_acqrst_wd;
+  logic fifo_ctrl_acqrst_we;
   logic fifo_ctrl_txrst_wd;
-  logic fifo_status_re;
+  logic fifo_ctrl_txrst_we;
   logic [6:0] fifo_status_fmtlvl_qs;
+  logic fifo_status_fmtlvl_re;
   logic [6:0] fifo_status_txlvl_qs;
+  logic fifo_status_txlvl_re;
   logic [6:0] fifo_status_rxlvl_qs;
+  logic fifo_status_rxlvl_re;
   logic [6:0] fifo_status_acqlvl_qs;
-  logic ovrd_we;
+  logic fifo_status_acqlvl_re;
   logic ovrd_txovrden_qs;
   logic ovrd_txovrden_wd;
+  logic ovrd_txovrden_we;
   logic ovrd_sclval_qs;
   logic ovrd_sclval_wd;
+  logic ovrd_sclval_we;
   logic ovrd_sdaval_qs;
   logic ovrd_sdaval_wd;
-  logic val_re;
+  logic ovrd_sdaval_we;
   logic [15:0] val_scl_rx_qs;
+  logic val_scl_rx_re;
   logic [15:0] val_sda_rx_qs;
-  logic timing0_we;
+  logic val_sda_rx_re;
   logic [15:0] timing0_thigh_qs;
   logic [15:0] timing0_thigh_wd;
+  logic timing0_thigh_we;
   logic [15:0] timing0_tlow_qs;
   logic [15:0] timing0_tlow_wd;
-  logic timing1_we;
+  logic timing0_tlow_we;
   logic [15:0] timing1_t_r_qs;
   logic [15:0] timing1_t_r_wd;
+  logic timing1_t_r_we;
   logic [15:0] timing1_t_f_qs;
   logic [15:0] timing1_t_f_wd;
-  logic timing2_we;
+  logic timing1_t_f_we;
   logic [15:0] timing2_tsu_sta_qs;
   logic [15:0] timing2_tsu_sta_wd;
+  logic timing2_tsu_sta_we;
   logic [15:0] timing2_thd_sta_qs;
   logic [15:0] timing2_thd_sta_wd;
-  logic timing3_we;
+  logic timing2_thd_sta_we;
   logic [15:0] timing3_tsu_dat_qs;
   logic [15:0] timing3_tsu_dat_wd;
+  logic timing3_tsu_dat_we;
   logic [15:0] timing3_thd_dat_qs;
   logic [15:0] timing3_thd_dat_wd;
-  logic timing4_we;
+  logic timing3_thd_dat_we;
   logic [15:0] timing4_tsu_sto_qs;
   logic [15:0] timing4_tsu_sto_wd;
+  logic timing4_tsu_sto_we;
   logic [15:0] timing4_t_buf_qs;
   logic [15:0] timing4_t_buf_wd;
-  logic timeout_ctrl_we;
+  logic timing4_t_buf_we;
   logic [30:0] timeout_ctrl_val_qs;
   logic [30:0] timeout_ctrl_val_wd;
+  logic timeout_ctrl_val_we;
   logic timeout_ctrl_en_qs;
   logic timeout_ctrl_en_wd;
-  logic target_id_we;
+  logic timeout_ctrl_en_we;
   logic [6:0] target_id_address0_qs;
   logic [6:0] target_id_address0_wd;
+  logic target_id_address0_we;
   logic [6:0] target_id_mask0_qs;
   logic [6:0] target_id_mask0_wd;
+  logic target_id_mask0_we;
   logic [6:0] target_id_address1_qs;
   logic [6:0] target_id_address1_wd;
+  logic target_id_address1_we;
   logic [6:0] target_id_mask1_qs;
   logic [6:0] target_id_mask1_wd;
-  logic acqdata_re;
+  logic target_id_mask1_we;
   logic [7:0] acqdata_abyte_qs;
+  logic acqdata_abyte_re;
   logic [1:0] acqdata_signal_qs;
-  logic txdata_we;
+  logic acqdata_signal_re;
   logic [7:0] txdata_wd;
-  logic host_timeout_ctrl_we;
+  logic txdata_we;
   logic [31:0] host_timeout_ctrl_qs;
   logic [31:0] host_timeout_ctrl_wd;
+  logic host_timeout_ctrl_we;
 
   // Register instances
   // R[intr_state]: V(False)
+
   //   F[fmt_threshold]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_fmt_threshold (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_fmt_threshold_we),
     .wd     (intr_state_fmt_threshold_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.fmt_threshold.de),
-    .d      (hw2reg.intr_state.fmt_threshold.d),
+    .d      (hw2reg.intr_state.fmt_threshold.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.fmt_threshold.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.fmt_threshold.q ),
 
     // to register interface (read)
     .qs     (intr_state_fmt_threshold_qs)
   );
 
+
   //   F[rx_threshold]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_rx_threshold (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_rx_threshold_we),
     .wd     (intr_state_rx_threshold_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.rx_threshold.de),
-    .d      (hw2reg.intr_state.rx_threshold.d),
+    .d      (hw2reg.intr_state.rx_threshold.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.rx_threshold.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.rx_threshold.q ),
 
     // to register interface (read)
     .qs     (intr_state_rx_threshold_qs)
   );
 
+
   //   F[fmt_overflow]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_fmt_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_fmt_overflow_we),
     .wd     (intr_state_fmt_overflow_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.fmt_overflow.de),
-    .d      (hw2reg.intr_state.fmt_overflow.d),
+    .d      (hw2reg.intr_state.fmt_overflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.fmt_overflow.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.fmt_overflow.q ),
 
     // to register interface (read)
     .qs     (intr_state_fmt_overflow_qs)
   );
 
+
   //   F[rx_overflow]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_rx_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_rx_overflow_we),
     .wd     (intr_state_rx_overflow_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.rx_overflow.de),
-    .d      (hw2reg.intr_state.rx_overflow.d),
+    .d      (hw2reg.intr_state.rx_overflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.rx_overflow.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.rx_overflow.q ),
 
     // to register interface (read)
     .qs     (intr_state_rx_overflow_qs)
   );
 
+
   //   F[nak]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_nak (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_nak_we),
     .wd     (intr_state_nak_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.nak.de),
-    .d      (hw2reg.intr_state.nak.d),
+    .d      (hw2reg.intr_state.nak.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.nak.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.nak.q ),
 
     // to register interface (read)
     .qs     (intr_state_nak_qs)
   );
 
+
   //   F[scl_interference]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_scl_interference (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_scl_interference_we),
     .wd     (intr_state_scl_interference_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.scl_interference.de),
-    .d      (hw2reg.intr_state.scl_interference.d),
+    .d      (hw2reg.intr_state.scl_interference.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.scl_interference.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.scl_interference.q ),
 
     // to register interface (read)
     .qs     (intr_state_scl_interference_qs)
   );
 
+
   //   F[sda_interference]: 6:6
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_sda_interference (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_sda_interference_we),
     .wd     (intr_state_sda_interference_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.sda_interference.de),
-    .d      (hw2reg.intr_state.sda_interference.d),
+    .d      (hw2reg.intr_state.sda_interference.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.sda_interference.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.sda_interference.q ),
 
     // to register interface (read)
     .qs     (intr_state_sda_interference_qs)
   );
 
+
   //   F[stretch_timeout]: 7:7
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_stretch_timeout (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_stretch_timeout_we),
     .wd     (intr_state_stretch_timeout_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.stretch_timeout.de),
-    .d      (hw2reg.intr_state.stretch_timeout.d),
+    .d      (hw2reg.intr_state.stretch_timeout.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.stretch_timeout.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.stretch_timeout.q ),
 
     // to register interface (read)
     .qs     (intr_state_stretch_timeout_qs)
   );
 
+
   //   F[sda_unstable]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_sda_unstable (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_sda_unstable_we),
     .wd     (intr_state_sda_unstable_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.sda_unstable.de),
-    .d      (hw2reg.intr_state.sda_unstable.d),
+    .d      (hw2reg.intr_state.sda_unstable.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.sda_unstable.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.sda_unstable.q ),
 
     // to register interface (read)
     .qs     (intr_state_sda_unstable_qs)
   );
 
+
   //   F[cmd_complete]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_cmd_complete (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_cmd_complete_we),
     .wd     (intr_state_cmd_complete_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.cmd_complete.de),
-    .d      (hw2reg.intr_state.cmd_complete.d),
+    .d      (hw2reg.intr_state.cmd_complete.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.cmd_complete.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.cmd_complete.q ),
 
     // to register interface (read)
     .qs     (intr_state_cmd_complete_qs)
   );
 
+
   //   F[tx_stretch]: 10:10
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_tx_stretch (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (intr_state_tx_stretch_we),
+    .wd     (intr_state_tx_stretch_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.tx_stretch.de),
-    .d      (hw2reg.intr_state.tx_stretch.d),
+    .d      (hw2reg.intr_state.tx_stretch.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.tx_stretch.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.tx_stretch.q ),
 
     // to register interface (read)
     .qs     (intr_state_tx_stretch_qs)
   );
 
+
   //   F[tx_overflow]: 11:11
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_tx_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_tx_overflow_we),
     .wd     (intr_state_tx_overflow_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.tx_overflow.de),
-    .d      (hw2reg.intr_state.tx_overflow.d),
+    .d      (hw2reg.intr_state.tx_overflow.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.tx_overflow.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.tx_overflow.q ),
 
     // to register interface (read)
     .qs     (intr_state_tx_overflow_qs)
   );
 
+
   //   F[acq_full]: 12:12
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_acq_full (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (intr_state_acq_full_we),
+    .wd     (intr_state_acq_full_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.acq_full.de),
-    .d      (hw2reg.intr_state.acq_full.d),
+    .d      (hw2reg.intr_state.acq_full.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.acq_full.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.acq_full.q ),
 
     // to register interface (read)
     .qs     (intr_state_acq_full_qs)
   );
 
+
   //   F[unexp_stop]: 13:13
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_unexp_stop (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_unexp_stop_we),
     .wd     (intr_state_unexp_stop_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.unexp_stop.de),
-    .d      (hw2reg.intr_state.unexp_stop.d),
+    .d      (hw2reg.intr_state.unexp_stop.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.unexp_stop.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.unexp_stop.q ),
 
     // to register interface (read)
     .qs     (intr_state_unexp_stop_qs)
   );
 
+
   //   F[host_timeout]: 14:14
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessW1C),
+    .SWACCESS("W1C"),
     .RESVAL  (1'h0)
   ) u_intr_state_host_timeout (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_state_we),
+    .we     (intr_state_host_timeout_we),
     .wd     (intr_state_host_timeout_wd),
 
     // from internal hardware
     .de     (hw2reg.intr_state.host_timeout.de),
-    .d      (hw2reg.intr_state.host_timeout.d),
+    .d      (hw2reg.intr_state.host_timeout.d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_state.host_timeout.q),
-    .ds     (),
+    .q      (reg2hw.intr_state.host_timeout.q ),
 
     // to register interface (read)
     .qs     (intr_state_host_timeout_qs)
@@ -695,391 +720,391 @@ module i2c_reg_top (
 
 
   // R[intr_enable]: V(False)
+
   //   F[fmt_threshold]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_fmt_threshold (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_fmt_threshold_we),
     .wd     (intr_enable_fmt_threshold_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.fmt_threshold.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.fmt_threshold.q ),
 
     // to register interface (read)
     .qs     (intr_enable_fmt_threshold_qs)
   );
 
+
   //   F[rx_threshold]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_rx_threshold (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_rx_threshold_we),
     .wd     (intr_enable_rx_threshold_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.rx_threshold.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.rx_threshold.q ),
 
     // to register interface (read)
     .qs     (intr_enable_rx_threshold_qs)
   );
 
+
   //   F[fmt_overflow]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_fmt_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_fmt_overflow_we),
     .wd     (intr_enable_fmt_overflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.fmt_overflow.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.fmt_overflow.q ),
 
     // to register interface (read)
     .qs     (intr_enable_fmt_overflow_qs)
   );
 
+
   //   F[rx_overflow]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_rx_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_rx_overflow_we),
     .wd     (intr_enable_rx_overflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.rx_overflow.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.rx_overflow.q ),
 
     // to register interface (read)
     .qs     (intr_enable_rx_overflow_qs)
   );
 
+
   //   F[nak]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_nak (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_nak_we),
     .wd     (intr_enable_nak_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.nak.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.nak.q ),
 
     // to register interface (read)
     .qs     (intr_enable_nak_qs)
   );
 
+
   //   F[scl_interference]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_scl_interference (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_scl_interference_we),
     .wd     (intr_enable_scl_interference_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.scl_interference.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.scl_interference.q ),
 
     // to register interface (read)
     .qs     (intr_enable_scl_interference_qs)
   );
 
+
   //   F[sda_interference]: 6:6
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_sda_interference (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_sda_interference_we),
     .wd     (intr_enable_sda_interference_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.sda_interference.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.sda_interference.q ),
 
     // to register interface (read)
     .qs     (intr_enable_sda_interference_qs)
   );
 
+
   //   F[stretch_timeout]: 7:7
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_stretch_timeout (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_stretch_timeout_we),
     .wd     (intr_enable_stretch_timeout_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.stretch_timeout.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.stretch_timeout.q ),
 
     // to register interface (read)
     .qs     (intr_enable_stretch_timeout_qs)
   );
 
+
   //   F[sda_unstable]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_sda_unstable (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_sda_unstable_we),
     .wd     (intr_enable_sda_unstable_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.sda_unstable.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.sda_unstable.q ),
 
     // to register interface (read)
     .qs     (intr_enable_sda_unstable_qs)
   );
 
+
   //   F[cmd_complete]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_cmd_complete (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_cmd_complete_we),
     .wd     (intr_enable_cmd_complete_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.cmd_complete.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.cmd_complete.q ),
 
     // to register interface (read)
     .qs     (intr_enable_cmd_complete_qs)
   );
 
+
   //   F[tx_stretch]: 10:10
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_tx_stretch (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_tx_stretch_we),
     .wd     (intr_enable_tx_stretch_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.tx_stretch.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.tx_stretch.q ),
 
     // to register interface (read)
     .qs     (intr_enable_tx_stretch_qs)
   );
 
+
   //   F[tx_overflow]: 11:11
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_tx_overflow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_tx_overflow_we),
     .wd     (intr_enable_tx_overflow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.tx_overflow.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.tx_overflow.q ),
 
     // to register interface (read)
     .qs     (intr_enable_tx_overflow_qs)
   );
 
+
   //   F[acq_full]: 12:12
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_acq_full (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_acq_full_we),
     .wd     (intr_enable_acq_full_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.acq_full.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.acq_full.q ),
 
     // to register interface (read)
     .qs     (intr_enable_acq_full_qs)
   );
 
+
   //   F[unexp_stop]: 13:13
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_unexp_stop (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_unexp_stop_we),
     .wd     (intr_enable_unexp_stop_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.unexp_stop.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.unexp_stop.q ),
 
     // to register interface (read)
     .qs     (intr_enable_unexp_stop_qs)
   );
 
+
   //   F[host_timeout]: 14:14
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_intr_enable_host_timeout (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (intr_enable_we),
+    .we     (intr_enable_host_timeout_we),
     .wd     (intr_enable_host_timeout_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.intr_enable.host_timeout.q),
-    .ds     (),
+    .q      (reg2hw.intr_enable.host_timeout.q ),
 
     // to register interface (read)
     .qs     (intr_enable_host_timeout_qs)
@@ -1087,254 +1112,234 @@ module i2c_reg_top (
 
 
   // R[intr_test]: V(True)
-  logic intr_test_qe;
-  logic [14:0] intr_test_flds_we;
-  assign intr_test_qe = &intr_test_flds_we;
+
   //   F[fmt_threshold]: 0:0
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_fmt_threshold (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_fmt_threshold_we),
     .wd     (intr_test_fmt_threshold_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[0]),
-    .q      (reg2hw.intr_test.fmt_threshold.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.fmt_threshold.qe),
+    .q      (reg2hw.intr_test.fmt_threshold.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.fmt_threshold.qe = intr_test_qe;
+
 
   //   F[rx_threshold]: 1:1
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_rx_threshold (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_rx_threshold_we),
     .wd     (intr_test_rx_threshold_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[1]),
-    .q      (reg2hw.intr_test.rx_threshold.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.rx_threshold.qe),
+    .q      (reg2hw.intr_test.rx_threshold.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.rx_threshold.qe = intr_test_qe;
+
 
   //   F[fmt_overflow]: 2:2
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_fmt_overflow (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_fmt_overflow_we),
     .wd     (intr_test_fmt_overflow_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[2]),
-    .q      (reg2hw.intr_test.fmt_overflow.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.fmt_overflow.qe),
+    .q      (reg2hw.intr_test.fmt_overflow.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.fmt_overflow.qe = intr_test_qe;
+
 
   //   F[rx_overflow]: 3:3
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_rx_overflow (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_rx_overflow_we),
     .wd     (intr_test_rx_overflow_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[3]),
-    .q      (reg2hw.intr_test.rx_overflow.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.rx_overflow.qe),
+    .q      (reg2hw.intr_test.rx_overflow.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.rx_overflow.qe = intr_test_qe;
+
 
   //   F[nak]: 4:4
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_nak (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_nak_we),
     .wd     (intr_test_nak_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[4]),
-    .q      (reg2hw.intr_test.nak.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.nak.qe),
+    .q      (reg2hw.intr_test.nak.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.nak.qe = intr_test_qe;
+
 
   //   F[scl_interference]: 5:5
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_scl_interference (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_scl_interference_we),
     .wd     (intr_test_scl_interference_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[5]),
-    .q      (reg2hw.intr_test.scl_interference.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.scl_interference.qe),
+    .q      (reg2hw.intr_test.scl_interference.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.scl_interference.qe = intr_test_qe;
+
 
   //   F[sda_interference]: 6:6
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_sda_interference (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_sda_interference_we),
     .wd     (intr_test_sda_interference_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[6]),
-    .q      (reg2hw.intr_test.sda_interference.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.sda_interference.qe),
+    .q      (reg2hw.intr_test.sda_interference.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.sda_interference.qe = intr_test_qe;
+
 
   //   F[stretch_timeout]: 7:7
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_stretch_timeout (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_stretch_timeout_we),
     .wd     (intr_test_stretch_timeout_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[7]),
-    .q      (reg2hw.intr_test.stretch_timeout.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.stretch_timeout.qe),
+    .q      (reg2hw.intr_test.stretch_timeout.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.stretch_timeout.qe = intr_test_qe;
+
 
   //   F[sda_unstable]: 8:8
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_sda_unstable (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_sda_unstable_we),
     .wd     (intr_test_sda_unstable_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[8]),
-    .q      (reg2hw.intr_test.sda_unstable.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.sda_unstable.qe),
+    .q      (reg2hw.intr_test.sda_unstable.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.sda_unstable.qe = intr_test_qe;
+
 
   //   F[cmd_complete]: 9:9
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_cmd_complete (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_cmd_complete_we),
     .wd     (intr_test_cmd_complete_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[9]),
-    .q      (reg2hw.intr_test.cmd_complete.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.cmd_complete.qe),
+    .q      (reg2hw.intr_test.cmd_complete.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.cmd_complete.qe = intr_test_qe;
+
 
   //   F[tx_stretch]: 10:10
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_tx_stretch (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_tx_stretch_we),
     .wd     (intr_test_tx_stretch_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[10]),
-    .q      (reg2hw.intr_test.tx_stretch.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.tx_stretch.qe),
+    .q      (reg2hw.intr_test.tx_stretch.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.tx_stretch.qe = intr_test_qe;
+
 
   //   F[tx_overflow]: 11:11
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_tx_overflow (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_tx_overflow_we),
     .wd     (intr_test_tx_overflow_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[11]),
-    .q      (reg2hw.intr_test.tx_overflow.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.tx_overflow.qe),
+    .q      (reg2hw.intr_test.tx_overflow.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.tx_overflow.qe = intr_test_qe;
+
 
   //   F[acq_full]: 12:12
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_acq_full (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_acq_full_we),
     .wd     (intr_test_acq_full_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[12]),
-    .q      (reg2hw.intr_test.acq_full.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.acq_full.qe),
+    .q      (reg2hw.intr_test.acq_full.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.acq_full.qe = intr_test_qe;
+
 
   //   F[unexp_stop]: 13:13
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_unexp_stop (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_unexp_stop_we),
     .wd     (intr_test_unexp_stop_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[13]),
-    .q      (reg2hw.intr_test.unexp_stop.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.unexp_stop.qe),
+    .q      (reg2hw.intr_test.unexp_stop.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.unexp_stop.qe = intr_test_qe;
+
 
   //   F[host_timeout]: 14:14
   prim_subreg_ext #(
     .DW    (1)
   ) u_intr_test_host_timeout (
     .re     (1'b0),
-    .we     (intr_test_we),
+    .we     (intr_test_host_timeout_we),
     .wd     (intr_test_host_timeout_wd),
     .d      ('0),
     .qre    (),
-    .qe     (intr_test_flds_we[14]),
-    .q      (reg2hw.intr_test.host_timeout.q),
-    .ds     (),
+    .qe     (reg2hw.intr_test.host_timeout.qe),
+    .q      (reg2hw.intr_test.host_timeout.q ),
     .qs     ()
   );
-  assign reg2hw.intr_test.host_timeout.qe = intr_test_qe;
 
 
   // R[alert_test]: V(True)
-  logic alert_test_qe;
-  logic [0:0] alert_test_flds_we;
-  assign alert_test_qe = &alert_test_flds_we;
+
   prim_subreg_ext #(
     .DW    (1)
   ) u_alert_test (
@@ -1343,88 +1348,86 @@ module i2c_reg_top (
     .wd     (alert_test_wd),
     .d      ('0),
     .qre    (),
-    .qe     (alert_test_flds_we[0]),
-    .q      (reg2hw.alert_test.q),
-    .ds     (),
+    .qe     (reg2hw.alert_test.qe),
+    .q      (reg2hw.alert_test.q ),
     .qs     ()
   );
-  assign reg2hw.alert_test.qe = alert_test_qe;
 
 
   // R[ctrl]: V(False)
+
   //   F[enablehost]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ctrl_enablehost (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ctrl_we),
+    .we     (ctrl_enablehost_we),
     .wd     (ctrl_enablehost_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ctrl.enablehost.q),
-    .ds     (),
+    .q      (reg2hw.ctrl.enablehost.q ),
 
     // to register interface (read)
     .qs     (ctrl_enablehost_qs)
   );
 
+
   //   F[enabletarget]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ctrl_enabletarget (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ctrl_we),
+    .we     (ctrl_enabletarget_we),
     .wd     (ctrl_enabletarget_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ctrl.enabletarget.q),
-    .ds     (),
+    .q      (reg2hw.ctrl.enabletarget.q ),
 
     // to register interface (read)
     .qs     (ctrl_enabletarget_qs)
   );
 
+
   //   F[llpbk]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ctrl_llpbk (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ctrl_we),
+    .we     (ctrl_llpbk_we),
     .wd     (ctrl_llpbk_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ctrl.llpbk.q),
-    .ds     (),
+    .q      (reg2hw.ctrl.llpbk.q ),
 
     // to register interface (read)
     .qs     (ctrl_llpbk_qs)
@@ -1432,158 +1435,159 @@ module i2c_reg_top (
 
 
   // R[status]: V(True)
+
   //   F[fmtfull]: 0:0
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_fmtfull (
-    .re     (status_re),
+    .re     (status_fmtfull_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.fmtfull.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_fmtfull_qs)
   );
 
+
   //   F[rxfull]: 1:1
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_rxfull (
-    .re     (status_re),
+    .re     (status_rxfull_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.rxfull.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_rxfull_qs)
   );
 
+
   //   F[fmtempty]: 2:2
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_fmtempty (
-    .re     (status_re),
+    .re     (status_fmtempty_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.fmtempty.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_fmtempty_qs)
   );
 
+
   //   F[hostidle]: 3:3
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_hostidle (
-    .re     (status_re),
+    .re     (status_hostidle_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.hostidle.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_hostidle_qs)
   );
 
+
   //   F[targetidle]: 4:4
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_targetidle (
-    .re     (status_re),
+    .re     (status_targetidle_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.targetidle.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_targetidle_qs)
   );
 
+
   //   F[rxempty]: 5:5
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_rxempty (
-    .re     (status_re),
+    .re     (status_rxempty_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.rxempty.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_rxempty_qs)
   );
 
+
   //   F[txfull]: 6:6
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_txfull (
-    .re     (status_re),
+    .re     (status_txfull_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.txfull.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_txfull_qs)
   );
 
+
   //   F[acqfull]: 7:7
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_acqfull (
-    .re     (status_re),
+    .re     (status_acqfull_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.acqfull.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_acqfull_qs)
   );
 
+
   //   F[txempty]: 8:8
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_txempty (
-    .re     (status_re),
+    .re     (status_txempty_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.txempty.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_txempty_qs)
   );
 
+
   //   F[acqempty]: 9:9
   prim_subreg_ext #(
     .DW    (1)
   ) u_status_acqempty (
-    .re     (status_re),
+    .re     (status_acqempty_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.status.acqempty.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (status_acqempty_qs)
   );
 
 
   // R[rdata]: V(True)
+
   prim_subreg_ext #(
     .DW    (8)
   ) u_rdata (
@@ -1593,498 +1597,453 @@ module i2c_reg_top (
     .d      (hw2reg.rdata.d),
     .qre    (reg2hw.rdata.re),
     .qe     (),
-    .q      (reg2hw.rdata.q),
-    .ds     (),
+    .q      (reg2hw.rdata.q ),
     .qs     (rdata_qs)
   );
 
 
   // R[fdata]: V(False)
-  logic fdata_qe;
-  logic [5:0] fdata_flds_we;
-  prim_flop #(
-    .Width(1),
-    .ResetValue(0)
-  ) u_fdata0_qe (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .d_i(&fdata_flds_we),
-    .q_o(fdata_qe)
-  );
+
   //   F[fbyte]: 7:0
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (8'h0)
   ) u_fdata_fbyte (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fdata_we),
+    .we     (fdata_fbyte_we),
     .wd     (fdata_fbyte_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fdata_flds_we[0]),
-    .q      (reg2hw.fdata.fbyte.q),
-    .ds     (),
+    .qe     (reg2hw.fdata.fbyte.qe),
+    .q      (reg2hw.fdata.fbyte.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fdata.fbyte.qe = fdata_qe;
+
 
   //   F[start]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fdata_start (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fdata_we),
+    .we     (fdata_start_we),
     .wd     (fdata_start_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fdata_flds_we[1]),
-    .q      (reg2hw.fdata.start.q),
-    .ds     (),
+    .qe     (reg2hw.fdata.start.qe),
+    .q      (reg2hw.fdata.start.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fdata.start.qe = fdata_qe;
+
 
   //   F[stop]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fdata_stop (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fdata_we),
+    .we     (fdata_stop_we),
     .wd     (fdata_stop_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fdata_flds_we[2]),
-    .q      (reg2hw.fdata.stop.q),
-    .ds     (),
+    .qe     (reg2hw.fdata.stop.qe),
+    .q      (reg2hw.fdata.stop.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fdata.stop.qe = fdata_qe;
+
 
   //   F[read]: 10:10
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fdata_read (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fdata_we),
+    .we     (fdata_read_we),
     .wd     (fdata_read_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fdata_flds_we[3]),
-    .q      (reg2hw.fdata.read.q),
-    .ds     (),
+    .qe     (reg2hw.fdata.read.qe),
+    .q      (reg2hw.fdata.read.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fdata.read.qe = fdata_qe;
+
 
   //   F[rcont]: 11:11
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fdata_rcont (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fdata_we),
+    .we     (fdata_rcont_we),
     .wd     (fdata_rcont_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fdata_flds_we[4]),
-    .q      (reg2hw.fdata.rcont.q),
-    .ds     (),
+    .qe     (reg2hw.fdata.rcont.qe),
+    .q      (reg2hw.fdata.rcont.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fdata.rcont.qe = fdata_qe;
+
 
   //   F[nakok]: 12:12
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fdata_nakok (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fdata_we),
+    .we     (fdata_nakok_we),
     .wd     (fdata_nakok_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fdata_flds_we[5]),
-    .q      (reg2hw.fdata.nakok.q),
-    .ds     (),
+    .qe     (reg2hw.fdata.nakok.qe),
+    .q      (reg2hw.fdata.nakok.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fdata.nakok.qe = fdata_qe;
 
 
   // R[fifo_ctrl]: V(False)
-  logic fifo_ctrl_qe;
-  logic [5:0] fifo_ctrl_flds_we;
-  prim_flop #(
-    .Width(1),
-    .ResetValue(0)
-  ) u_fifo_ctrl0_qe (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .d_i(&fifo_ctrl_flds_we),
-    .q_o(fifo_ctrl_qe)
-  );
+
   //   F[rxrst]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fifo_ctrl_rxrst (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fifo_ctrl_we),
+    .we     (fifo_ctrl_rxrst_we),
     .wd     (fifo_ctrl_rxrst_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fifo_ctrl_flds_we[0]),
-    .q      (reg2hw.fifo_ctrl.rxrst.q),
-    .ds     (),
+    .qe     (reg2hw.fifo_ctrl.rxrst.qe),
+    .q      (reg2hw.fifo_ctrl.rxrst.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fifo_ctrl.rxrst.qe = fifo_ctrl_qe;
+
 
   //   F[fmtrst]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fifo_ctrl_fmtrst (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fifo_ctrl_we),
+    .we     (fifo_ctrl_fmtrst_we),
     .wd     (fifo_ctrl_fmtrst_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fifo_ctrl_flds_we[1]),
-    .q      (reg2hw.fifo_ctrl.fmtrst.q),
-    .ds     (),
+    .qe     (reg2hw.fifo_ctrl.fmtrst.qe),
+    .q      (reg2hw.fifo_ctrl.fmtrst.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fifo_ctrl.fmtrst.qe = fifo_ctrl_qe;
+
 
   //   F[rxilvl]: 4:2
   prim_subreg #(
     .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (3'h0)
   ) u_fifo_ctrl_rxilvl (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fifo_ctrl_we),
+    .we     (fifo_ctrl_rxilvl_we),
     .wd     (fifo_ctrl_rxilvl_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fifo_ctrl_flds_we[2]),
-    .q      (reg2hw.fifo_ctrl.rxilvl.q),
-    .ds     (),
+    .qe     (reg2hw.fifo_ctrl.rxilvl.qe),
+    .q      (reg2hw.fifo_ctrl.rxilvl.q ),
 
     // to register interface (read)
     .qs     (fifo_ctrl_rxilvl_qs)
   );
-  assign reg2hw.fifo_ctrl.rxilvl.qe = fifo_ctrl_qe;
+
 
   //   F[fmtilvl]: 6:5
   prim_subreg #(
     .DW      (2),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (2'h0)
   ) u_fifo_ctrl_fmtilvl (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fifo_ctrl_we),
+    .we     (fifo_ctrl_fmtilvl_we),
     .wd     (fifo_ctrl_fmtilvl_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fifo_ctrl_flds_we[3]),
-    .q      (reg2hw.fifo_ctrl.fmtilvl.q),
-    .ds     (),
+    .qe     (reg2hw.fifo_ctrl.fmtilvl.qe),
+    .q      (reg2hw.fifo_ctrl.fmtilvl.q ),
 
     // to register interface (read)
     .qs     (fifo_ctrl_fmtilvl_qs)
   );
-  assign reg2hw.fifo_ctrl.fmtilvl.qe = fifo_ctrl_qe;
+
 
   //   F[acqrst]: 7:7
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fifo_ctrl_acqrst (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fifo_ctrl_we),
+    .we     (fifo_ctrl_acqrst_we),
     .wd     (fifo_ctrl_acqrst_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fifo_ctrl_flds_we[4]),
-    .q      (reg2hw.fifo_ctrl.acqrst.q),
-    .ds     (),
+    .qe     (reg2hw.fifo_ctrl.acqrst.qe),
+    .q      (reg2hw.fifo_ctrl.acqrst.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fifo_ctrl.acqrst.qe = fifo_ctrl_qe;
+
 
   //   F[txrst]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (1'h0)
   ) u_fifo_ctrl_txrst (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (fifo_ctrl_we),
+    .we     (fifo_ctrl_txrst_we),
     .wd     (fifo_ctrl_txrst_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (fifo_ctrl_flds_we[5]),
-    .q      (reg2hw.fifo_ctrl.txrst.q),
-    .ds     (),
+    .qe     (reg2hw.fifo_ctrl.txrst.qe),
+    .q      (reg2hw.fifo_ctrl.txrst.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.fifo_ctrl.txrst.qe = fifo_ctrl_qe;
 
 
   // R[fifo_status]: V(True)
+
   //   F[fmtlvl]: 6:0
   prim_subreg_ext #(
     .DW    (7)
   ) u_fifo_status_fmtlvl (
-    .re     (fifo_status_re),
+    .re     (fifo_status_fmtlvl_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.fifo_status.fmtlvl.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (fifo_status_fmtlvl_qs)
   );
 
+
   //   F[txlvl]: 14:8
   prim_subreg_ext #(
     .DW    (7)
   ) u_fifo_status_txlvl (
-    .re     (fifo_status_re),
+    .re     (fifo_status_txlvl_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.fifo_status.txlvl.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (fifo_status_txlvl_qs)
   );
 
+
   //   F[rxlvl]: 22:16
   prim_subreg_ext #(
     .DW    (7)
   ) u_fifo_status_rxlvl (
-    .re     (fifo_status_re),
+    .re     (fifo_status_rxlvl_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.fifo_status.rxlvl.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (fifo_status_rxlvl_qs)
   );
 
+
   //   F[acqlvl]: 30:24
   prim_subreg_ext #(
     .DW    (7)
   ) u_fifo_status_acqlvl (
-    .re     (fifo_status_re),
+    .re     (fifo_status_acqlvl_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.fifo_status.acqlvl.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (fifo_status_acqlvl_qs)
   );
 
 
   // R[ovrd]: V(False)
+
   //   F[txovrden]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ovrd_txovrden (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ovrd_we),
+    .we     (ovrd_txovrden_we),
     .wd     (ovrd_txovrden_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ovrd.txovrden.q),
-    .ds     (),
+    .q      (reg2hw.ovrd.txovrden.q ),
 
     // to register interface (read)
     .qs     (ovrd_txovrden_qs)
   );
 
+
   //   F[sclval]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ovrd_sclval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ovrd_we),
+    .we     (ovrd_sclval_we),
     .wd     (ovrd_sclval_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ovrd.sclval.q),
-    .ds     (),
+    .q      (reg2hw.ovrd.sclval.q ),
 
     // to register interface (read)
     .qs     (ovrd_sclval_qs)
   );
 
+
   //   F[sdaval]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ovrd_sdaval (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ovrd_we),
+    .we     (ovrd_sdaval_we),
     .wd     (ovrd_sdaval_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ovrd.sdaval.q),
-    .ds     (),
+    .q      (reg2hw.ovrd.sdaval.q ),
 
     // to register interface (read)
     .qs     (ovrd_sdaval_qs)
@@ -2092,85 +2051,85 @@ module i2c_reg_top (
 
 
   // R[val]: V(True)
+
   //   F[scl_rx]: 15:0
   prim_subreg_ext #(
     .DW    (16)
   ) u_val_scl_rx (
-    .re     (val_re),
+    .re     (val_scl_rx_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.val.scl_rx.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (val_scl_rx_qs)
   );
 
+
   //   F[sda_rx]: 31:16
   prim_subreg_ext #(
     .DW    (16)
   ) u_val_sda_rx (
-    .re     (val_re),
+    .re     (val_sda_rx_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.val.sda_rx.d),
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (val_sda_rx_qs)
   );
 
 
   // R[timing0]: V(False)
+
   //   F[thigh]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing0_thigh (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing0_we),
+    .we     (timing0_thigh_we),
     .wd     (timing0_thigh_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing0.thigh.q),
-    .ds     (),
+    .q      (reg2hw.timing0.thigh.q ),
 
     // to register interface (read)
     .qs     (timing0_thigh_qs)
   );
 
+
   //   F[tlow]: 31:16
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing0_tlow (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing0_we),
+    .we     (timing0_tlow_we),
     .wd     (timing0_tlow_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing0.tlow.q),
-    .ds     (),
+    .q      (reg2hw.timing0.tlow.q ),
 
     // to register interface (read)
     .qs     (timing0_tlow_qs)
@@ -2178,53 +2137,53 @@ module i2c_reg_top (
 
 
   // R[timing1]: V(False)
+
   //   F[t_r]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing1_t_r (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing1_we),
+    .we     (timing1_t_r_we),
     .wd     (timing1_t_r_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing1.t_r.q),
-    .ds     (),
+    .q      (reg2hw.timing1.t_r.q ),
 
     // to register interface (read)
     .qs     (timing1_t_r_qs)
   );
 
+
   //   F[t_f]: 31:16
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing1_t_f (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing1_we),
+    .we     (timing1_t_f_we),
     .wd     (timing1_t_f_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing1.t_f.q),
-    .ds     (),
+    .q      (reg2hw.timing1.t_f.q ),
 
     // to register interface (read)
     .qs     (timing1_t_f_qs)
@@ -2232,53 +2191,53 @@ module i2c_reg_top (
 
 
   // R[timing2]: V(False)
+
   //   F[tsu_sta]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing2_tsu_sta (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing2_we),
+    .we     (timing2_tsu_sta_we),
     .wd     (timing2_tsu_sta_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing2.tsu_sta.q),
-    .ds     (),
+    .q      (reg2hw.timing2.tsu_sta.q ),
 
     // to register interface (read)
     .qs     (timing2_tsu_sta_qs)
   );
 
+
   //   F[thd_sta]: 31:16
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing2_thd_sta (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing2_we),
+    .we     (timing2_thd_sta_we),
     .wd     (timing2_thd_sta_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing2.thd_sta.q),
-    .ds     (),
+    .q      (reg2hw.timing2.thd_sta.q ),
 
     // to register interface (read)
     .qs     (timing2_thd_sta_qs)
@@ -2286,53 +2245,53 @@ module i2c_reg_top (
 
 
   // R[timing3]: V(False)
+
   //   F[tsu_dat]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing3_tsu_dat (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing3_we),
+    .we     (timing3_tsu_dat_we),
     .wd     (timing3_tsu_dat_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing3.tsu_dat.q),
-    .ds     (),
+    .q      (reg2hw.timing3.tsu_dat.q ),
 
     // to register interface (read)
     .qs     (timing3_tsu_dat_qs)
   );
 
+
   //   F[thd_dat]: 31:16
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing3_thd_dat (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing3_we),
+    .we     (timing3_thd_dat_we),
     .wd     (timing3_thd_dat_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing3.thd_dat.q),
-    .ds     (),
+    .q      (reg2hw.timing3.thd_dat.q ),
 
     // to register interface (read)
     .qs     (timing3_thd_dat_qs)
@@ -2340,53 +2299,53 @@ module i2c_reg_top (
 
 
   // R[timing4]: V(False)
+
   //   F[tsu_sto]: 15:0
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing4_tsu_sto (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing4_we),
+    .we     (timing4_tsu_sto_we),
     .wd     (timing4_tsu_sto_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing4.tsu_sto.q),
-    .ds     (),
+    .q      (reg2hw.timing4.tsu_sto.q ),
 
     // to register interface (read)
     .qs     (timing4_tsu_sto_qs)
   );
 
+
   //   F[t_buf]: 31:16
   prim_subreg #(
     .DW      (16),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (16'h0)
   ) u_timing4_t_buf (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timing4_we),
+    .we     (timing4_t_buf_we),
     .wd     (timing4_t_buf_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timing4.t_buf.q),
-    .ds     (),
+    .q      (reg2hw.timing4.t_buf.q ),
 
     // to register interface (read)
     .qs     (timing4_t_buf_qs)
@@ -2394,53 +2353,53 @@ module i2c_reg_top (
 
 
   // R[timeout_ctrl]: V(False)
+
   //   F[val]: 30:0
   prim_subreg #(
     .DW      (31),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (31'h0)
   ) u_timeout_ctrl_val (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timeout_ctrl_we),
+    .we     (timeout_ctrl_val_we),
     .wd     (timeout_ctrl_val_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timeout_ctrl.val.q),
-    .ds     (),
+    .q      (reg2hw.timeout_ctrl.val.q ),
 
     // to register interface (read)
     .qs     (timeout_ctrl_val_qs)
   );
 
+
   //   F[en]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_timeout_ctrl_en (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (timeout_ctrl_we),
+    .we     (timeout_ctrl_en_we),
     .wd     (timeout_ctrl_en_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.timeout_ctrl.en.q),
-    .ds     (),
+    .q      (reg2hw.timeout_ctrl.en.q ),
 
     // to register interface (read)
     .qs     (timeout_ctrl_en_qs)
@@ -2448,105 +2407,105 @@ module i2c_reg_top (
 
 
   // R[target_id]: V(False)
+
   //   F[address0]: 6:0
   prim_subreg #(
     .DW      (7),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (7'h0)
   ) u_target_id_address0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (target_id_we),
+    .we     (target_id_address0_we),
     .wd     (target_id_address0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.target_id.address0.q),
-    .ds     (),
+    .q      (reg2hw.target_id.address0.q ),
 
     // to register interface (read)
     .qs     (target_id_address0_qs)
   );
 
+
   //   F[mask0]: 13:7
   prim_subreg #(
     .DW      (7),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (7'h0)
   ) u_target_id_mask0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (target_id_we),
+    .we     (target_id_mask0_we),
     .wd     (target_id_mask0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.target_id.mask0.q),
-    .ds     (),
+    .q      (reg2hw.target_id.mask0.q ),
 
     // to register interface (read)
     .qs     (target_id_mask0_qs)
   );
 
+
   //   F[address1]: 20:14
   prim_subreg #(
     .DW      (7),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (7'h0)
   ) u_target_id_address1 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (target_id_we),
+    .we     (target_id_address1_we),
     .wd     (target_id_address1_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.target_id.address1.q),
-    .ds     (),
+    .q      (reg2hw.target_id.address1.q ),
 
     // to register interface (read)
     .qs     (target_id_address1_qs)
   );
 
+
   //   F[mask1]: 27:21
   prim_subreg #(
     .DW      (7),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (7'h0)
   ) u_target_id_mask1 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (target_id_we),
+    .we     (target_id_mask1_we),
     .wd     (target_id_mask1_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.target_id.mask1.q),
-    .ds     (),
+    .q      (reg2hw.target_id.mask1.q ),
 
     // to register interface (read)
     .qs     (target_id_mask1_qs)
@@ -2554,56 +2513,46 @@ module i2c_reg_top (
 
 
   // R[acqdata]: V(True)
+
   //   F[abyte]: 7:0
   prim_subreg_ext #(
     .DW    (8)
   ) u_acqdata_abyte (
-    .re     (acqdata_re),
+    .re     (acqdata_abyte_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.acqdata.abyte.d),
     .qre    (reg2hw.acqdata.abyte.re),
     .qe     (),
-    .q      (reg2hw.acqdata.abyte.q),
-    .ds     (),
+    .q      (reg2hw.acqdata.abyte.q ),
     .qs     (acqdata_abyte_qs)
   );
 
+
   //   F[signal]: 9:8
   prim_subreg_ext #(
     .DW    (2)
   ) u_acqdata_signal (
-    .re     (acqdata_re),
+    .re     (acqdata_signal_re),
     .we     (1'b0),
     .wd     ('0),
     .d      (hw2reg.acqdata.signal.d),
     .qre    (reg2hw.acqdata.signal.re),
     .qe     (),
-    .q      (reg2hw.acqdata.signal.q),
-    .ds     (),
+    .q      (reg2hw.acqdata.signal.q ),
     .qs     (acqdata_signal_qs)
   );
 
 
   // R[txdata]: V(False)
-  logic txdata_qe;
-  logic [0:0] txdata_flds_we;
-  prim_flop #(
-    .Width(1),
-    .ResetValue(0)
-  ) u_txdata0_qe (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .d_i(&txdata_flds_we),
-    .q_o(txdata_qe)
-  );
+
   prim_subreg #(
     .DW      (8),
-    .SwAccess(prim_subreg_pkg::SwAccessWO),
+    .SWACCESS("WO"),
     .RESVAL  (8'h0)
   ) u_txdata (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (txdata_we),
@@ -2611,27 +2560,25 @@ module i2c_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
-    .qe     (txdata_flds_we[0]),
-    .q      (reg2hw.txdata.q),
-    .ds     (),
+    .qe     (reg2hw.txdata.qe),
+    .q      (reg2hw.txdata.q ),
 
-    // to register interface (read)
     .qs     ()
   );
-  assign reg2hw.txdata.qe = txdata_qe;
 
 
   // R[host_timeout_ctrl]: V(False)
+
   prim_subreg #(
     .DW      (32),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (32'h0)
   ) u_host_timeout_ctrl (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (host_timeout_ctrl_we),
@@ -2639,12 +2586,11 @@ module i2c_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.host_timeout_ctrl.q),
-    .ds     (),
+    .q      (reg2hw.host_timeout_ctrl.q ),
 
     // to register interface (read)
     .qs     (host_timeout_ctrl_qs)
@@ -2652,6 +2598,7 @@ module i2c_reg_top (
 
 
 
+
   logic [21:0] addr_hit;
   always_comb begin
     addr_hit = '0;
@@ -2708,217 +2655,290 @@ module i2c_reg_top (
                (addr_hit[21] & (|(I2C_PERMIT[21] & ~reg_be)))));
   end
 
-  // Generate write-enables
-  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;
-
+  assign intr_state_fmt_threshold_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_fmt_threshold_wd = reg_wdata[0];
 
+  assign intr_state_rx_threshold_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_rx_threshold_wd = reg_wdata[1];
 
+  assign intr_state_fmt_overflow_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_fmt_overflow_wd = reg_wdata[2];
 
+  assign intr_state_rx_overflow_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_rx_overflow_wd = reg_wdata[3];
 
+  assign intr_state_nak_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_nak_wd = reg_wdata[4];
 
+  assign intr_state_scl_interference_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_scl_interference_wd = reg_wdata[5];
 
+  assign intr_state_sda_interference_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_sda_interference_wd = reg_wdata[6];
 
+  assign intr_state_stretch_timeout_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_stretch_timeout_wd = reg_wdata[7];
 
+  assign intr_state_sda_unstable_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_sda_unstable_wd = reg_wdata[8];
 
+  assign intr_state_cmd_complete_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_cmd_complete_wd = reg_wdata[9];
 
+  assign intr_state_tx_stretch_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_tx_stretch_wd = reg_wdata[10];
+
+  assign intr_state_tx_overflow_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_tx_overflow_wd = reg_wdata[11];
 
+  assign intr_state_acq_full_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_acq_full_wd = reg_wdata[12];
+
+  assign intr_state_unexp_stop_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_unexp_stop_wd = reg_wdata[13];
 
+  assign intr_state_host_timeout_we = addr_hit[0] & reg_we & !reg_error;
   assign intr_state_host_timeout_wd = reg_wdata[14];
-  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;
 
+  assign intr_enable_fmt_threshold_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_fmt_threshold_wd = reg_wdata[0];
 
+  assign intr_enable_rx_threshold_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_rx_threshold_wd = reg_wdata[1];
 
+  assign intr_enable_fmt_overflow_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_fmt_overflow_wd = reg_wdata[2];
 
+  assign intr_enable_rx_overflow_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_rx_overflow_wd = reg_wdata[3];
 
+  assign intr_enable_nak_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_nak_wd = reg_wdata[4];
 
+  assign intr_enable_scl_interference_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_scl_interference_wd = reg_wdata[5];
 
+  assign intr_enable_sda_interference_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_sda_interference_wd = reg_wdata[6];
 
+  assign intr_enable_stretch_timeout_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_stretch_timeout_wd = reg_wdata[7];
 
+  assign intr_enable_sda_unstable_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_sda_unstable_wd = reg_wdata[8];
 
+  assign intr_enable_cmd_complete_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_cmd_complete_wd = reg_wdata[9];
 
+  assign intr_enable_tx_stretch_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_tx_stretch_wd = reg_wdata[10];
 
+  assign intr_enable_tx_overflow_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_tx_overflow_wd = reg_wdata[11];
 
+  assign intr_enable_acq_full_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_acq_full_wd = reg_wdata[12];
 
+  assign intr_enable_unexp_stop_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_unexp_stop_wd = reg_wdata[13];
 
+  assign intr_enable_host_timeout_we = addr_hit[1] & reg_we & !reg_error;
   assign intr_enable_host_timeout_wd = reg_wdata[14];
-  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;
 
+  assign intr_test_fmt_threshold_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_fmt_threshold_wd = reg_wdata[0];
 
+  assign intr_test_rx_threshold_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_rx_threshold_wd = reg_wdata[1];
 
+  assign intr_test_fmt_overflow_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_fmt_overflow_wd = reg_wdata[2];
 
+  assign intr_test_rx_overflow_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_rx_overflow_wd = reg_wdata[3];
 
+  assign intr_test_nak_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_nak_wd = reg_wdata[4];
 
+  assign intr_test_scl_interference_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_scl_interference_wd = reg_wdata[5];
 
+  assign intr_test_sda_interference_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_sda_interference_wd = reg_wdata[6];
 
+  assign intr_test_stretch_timeout_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_stretch_timeout_wd = reg_wdata[7];
 
+  assign intr_test_sda_unstable_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_sda_unstable_wd = reg_wdata[8];
 
+  assign intr_test_cmd_complete_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_cmd_complete_wd = reg_wdata[9];
 
+  assign intr_test_tx_stretch_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_tx_stretch_wd = reg_wdata[10];
 
+  assign intr_test_tx_overflow_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_tx_overflow_wd = reg_wdata[11];
 
+  assign intr_test_acq_full_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_acq_full_wd = reg_wdata[12];
 
+  assign intr_test_unexp_stop_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_unexp_stop_wd = reg_wdata[13];
 
+  assign intr_test_host_timeout_we = addr_hit[2] & reg_we & !reg_error;
   assign intr_test_host_timeout_wd = reg_wdata[14];
-  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
 
+  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;
   assign alert_test_wd = reg_wdata[0];
-  assign ctrl_we = addr_hit[4] & reg_we & !reg_error;
 
+  assign ctrl_enablehost_we = addr_hit[4] & reg_we & !reg_error;
   assign ctrl_enablehost_wd = reg_wdata[0];
 
+  assign ctrl_enabletarget_we = addr_hit[4] & reg_we & !reg_error;
   assign ctrl_enabletarget_wd = reg_wdata[1];
 
+  assign ctrl_llpbk_we = addr_hit[4] & reg_we & !reg_error;
   assign ctrl_llpbk_wd = reg_wdata[2];
-  assign status_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_fmtfull_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_rxfull_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_fmtempty_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_hostidle_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_targetidle_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_rxempty_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_txfull_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_acqfull_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_txempty_re = addr_hit[5] & reg_re & !reg_error;
+
+  assign status_acqempty_re = addr_hit[5] & reg_re & !reg_error;
+
   assign rdata_re = addr_hit[6] & reg_re & !reg_error;
-  assign fdata_we = addr_hit[7] & reg_we & !reg_error;
 
+  assign fdata_fbyte_we = addr_hit[7] & reg_we & !reg_error;
   assign fdata_fbyte_wd = reg_wdata[7:0];
 
+  assign fdata_start_we = addr_hit[7] & reg_we & !reg_error;
   assign fdata_start_wd = reg_wdata[8];
 
+  assign fdata_stop_we = addr_hit[7] & reg_we & !reg_error;
   assign fdata_stop_wd = reg_wdata[9];
 
+  assign fdata_read_we = addr_hit[7] & reg_we & !reg_error;
   assign fdata_read_wd = reg_wdata[10];
 
+  assign fdata_rcont_we = addr_hit[7] & reg_we & !reg_error;
   assign fdata_rcont_wd = reg_wdata[11];
 
+  assign fdata_nakok_we = addr_hit[7] & reg_we & !reg_error;
   assign fdata_nakok_wd = reg_wdata[12];
-  assign fifo_ctrl_we = addr_hit[8] & reg_we & !reg_error;
 
+  assign fifo_ctrl_rxrst_we = addr_hit[8] & reg_we & !reg_error;
   assign fifo_ctrl_rxrst_wd = reg_wdata[0];
 
+  assign fifo_ctrl_fmtrst_we = addr_hit[8] & reg_we & !reg_error;
   assign fifo_ctrl_fmtrst_wd = reg_wdata[1];
 
+  assign fifo_ctrl_rxilvl_we = addr_hit[8] & reg_we & !reg_error;
   assign fifo_ctrl_rxilvl_wd = reg_wdata[4:2];
 
+  assign fifo_ctrl_fmtilvl_we = addr_hit[8] & reg_we & !reg_error;
   assign fifo_ctrl_fmtilvl_wd = reg_wdata[6:5];
 
+  assign fifo_ctrl_acqrst_we = addr_hit[8] & reg_we & !reg_error;
   assign fifo_ctrl_acqrst_wd = reg_wdata[7];
 
+  assign fifo_ctrl_txrst_we = addr_hit[8] & reg_we & !reg_error;
   assign fifo_ctrl_txrst_wd = reg_wdata[8];
-  assign fifo_status_re = addr_hit[9] & reg_re & !reg_error;
-  assign ovrd_we = addr_hit[10] & reg_we & !reg_error;
 
+  assign fifo_status_fmtlvl_re = addr_hit[9] & reg_re & !reg_error;
+
+  assign fifo_status_txlvl_re = addr_hit[9] & reg_re & !reg_error;
+
+  assign fifo_status_rxlvl_re = addr_hit[9] & reg_re & !reg_error;
+
+  assign fifo_status_acqlvl_re = addr_hit[9] & reg_re & !reg_error;
+
+  assign ovrd_txovrden_we = addr_hit[10] & reg_we & !reg_error;
   assign ovrd_txovrden_wd = reg_wdata[0];
 
+  assign ovrd_sclval_we = addr_hit[10] & reg_we & !reg_error;
   assign ovrd_sclval_wd = reg_wdata[1];
 
+  assign ovrd_sdaval_we = addr_hit[10] & reg_we & !reg_error;
   assign ovrd_sdaval_wd = reg_wdata[2];
-  assign val_re = addr_hit[11] & reg_re & !reg_error;
-  assign timing0_we = addr_hit[12] & reg_we & !reg_error;
 
+  assign val_scl_rx_re = addr_hit[11] & reg_re & !reg_error;
+
+  assign val_sda_rx_re = addr_hit[11] & reg_re & !reg_error;
+
+  assign timing0_thigh_we = addr_hit[12] & reg_we & !reg_error;
   assign timing0_thigh_wd = reg_wdata[15:0];
 
+  assign timing0_tlow_we = addr_hit[12] & reg_we & !reg_error;
   assign timing0_tlow_wd = reg_wdata[31:16];
-  assign timing1_we = addr_hit[13] & reg_we & !reg_error;
 
+  assign timing1_t_r_we = addr_hit[13] & reg_we & !reg_error;
   assign timing1_t_r_wd = reg_wdata[15:0];
 
+  assign timing1_t_f_we = addr_hit[13] & reg_we & !reg_error;
   assign timing1_t_f_wd = reg_wdata[31:16];
-  assign timing2_we = addr_hit[14] & reg_we & !reg_error;
 
+  assign timing2_tsu_sta_we = addr_hit[14] & reg_we & !reg_error;
   assign timing2_tsu_sta_wd = reg_wdata[15:0];
 
+  assign timing2_thd_sta_we = addr_hit[14] & reg_we & !reg_error;
   assign timing2_thd_sta_wd = reg_wdata[31:16];
-  assign timing3_we = addr_hit[15] & reg_we & !reg_error;
 
+  assign timing3_tsu_dat_we = addr_hit[15] & reg_we & !reg_error;
   assign timing3_tsu_dat_wd = reg_wdata[15:0];
 
+  assign timing3_thd_dat_we = addr_hit[15] & reg_we & !reg_error;
   assign timing3_thd_dat_wd = reg_wdata[31:16];
-  assign timing4_we = addr_hit[16] & reg_we & !reg_error;
 
+  assign timing4_tsu_sto_we = addr_hit[16] & reg_we & !reg_error;
   assign timing4_tsu_sto_wd = reg_wdata[15:0];
 
+  assign timing4_t_buf_we = addr_hit[16] & reg_we & !reg_error;
   assign timing4_t_buf_wd = reg_wdata[31:16];
-  assign timeout_ctrl_we = addr_hit[17] & reg_we & !reg_error;
 
+  assign timeout_ctrl_val_we = addr_hit[17] & reg_we & !reg_error;
   assign timeout_ctrl_val_wd = reg_wdata[30:0];
 
+  assign timeout_ctrl_en_we = addr_hit[17] & reg_we & !reg_error;
   assign timeout_ctrl_en_wd = reg_wdata[31];
-  assign target_id_we = addr_hit[18] & reg_we & !reg_error;
 
+  assign target_id_address0_we = addr_hit[18] & reg_we & !reg_error;
   assign target_id_address0_wd = reg_wdata[6:0];
 
+  assign target_id_mask0_we = addr_hit[18] & reg_we & !reg_error;
   assign target_id_mask0_wd = reg_wdata[13:7];
 
+  assign target_id_address1_we = addr_hit[18] & reg_we & !reg_error;
   assign target_id_address1_wd = reg_wdata[20:14];
 
+  assign target_id_mask1_we = addr_hit[18] & reg_we & !reg_error;
   assign target_id_mask1_wd = reg_wdata[27:21];
-  assign acqdata_re = addr_hit[19] & reg_re & !reg_error;
-  assign txdata_we = addr_hit[20] & reg_we & !reg_error;
 
+  assign acqdata_abyte_re = addr_hit[19] & reg_re & !reg_error;
+
+  assign acqdata_signal_re = addr_hit[19] & reg_re & !reg_error;
+
+  assign txdata_we = addr_hit[20] & reg_we & !reg_error;
   assign txdata_wd = reg_wdata[7:0];
-  assign host_timeout_ctrl_we = addr_hit[21] & reg_we & !reg_error;
 
+  assign host_timeout_ctrl_we = addr_hit[21] & reg_we & !reg_error;
   assign host_timeout_ctrl_wd = reg_wdata[31:0];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = ctrl_we;
-    reg_we_check[5] = 1'b0;
-    reg_we_check[6] = 1'b0;
-    reg_we_check[7] = fdata_we;
-    reg_we_check[8] = fifo_ctrl_we;
-    reg_we_check[9] = 1'b0;
-    reg_we_check[10] = ovrd_we;
-    reg_we_check[11] = 1'b0;
-    reg_we_check[12] = timing0_we;
-    reg_we_check[13] = timing1_we;
-    reg_we_check[14] = timing2_we;
-    reg_we_check[15] = timing3_we;
-    reg_we_check[16] = timing4_we;
-    reg_we_check[17] = timeout_ctrl_we;
-    reg_we_check[18] = target_id_we;
-    reg_we_check[19] = 1'b0;
-    reg_we_check[20] = txdata_we;
-    reg_we_check[21] = host_timeout_ctrl_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
@@ -3096,13 +3116,6 @@ module i2c_reg_top (
     endcase
   end
 
-  // shadow busy
-  logic shadow_busy;
-  assign shadow_busy = 1'b0;
-
-  // register busy
-  assign reg_busy = shadow_busy;
-
   // Unused signal tieoff
 
   // wdata / byte enable are not always fully used
@@ -3113,15 +3126,58 @@ module i2c_reg_top (
   assign unused_be = ^reg_be;
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
-  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)
+endmodule
 
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)
+module i2c_reg_top_intf
+#(
+  parameter int AW = 7,
+  localparam int DW = 32
+) (
+  input logic clk_i,
+  input logic rst_ni,
+  REG_BUS.in  regbus_slave,
+  // To HW
+  output i2c_reg_pkg::i2c_reg2hw_t reg2hw, // Write
+  input  i2c_reg_pkg::i2c_hw2reg_t hw2reg, // Read
+  // Config
+  input devmode_i // If 1, explicit error return for unmapped register access
+);
+ localparam int unsigned STRB_WIDTH = DW/8;
+
+`include "register_interface/typedef.svh"
+`include "register_interface/assign.svh"
+
+  // Define structs for reg_bus
+  typedef logic [AW-1:0] addr_t;
+  typedef logic [DW-1:0] data_t;
+  typedef logic [STRB_WIDTH-1:0] strb_t;
+  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)
+
+  reg_bus_req_t s_reg_req;
+  reg_bus_rsp_t s_reg_rsp;
+  
+  // Assign SV interface to structs
+  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
+  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)
+
+  
+
+  i2c_reg_top #(
+    .reg_req_t(reg_bus_req_t),
+    .reg_rsp_t(reg_bus_rsp_t),
+    .AW(AW)
+  ) i_regs (
+    .clk_i,
+    .rst_ni,
+    .reg_req_i(s_reg_req),
+    .reg_rsp_o(s_reg_rsp),
+    .reg2hw, // Write
+    .hw2reg, // Read
+    .devmode_i
+  );
+  
+endmodule
 
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
 
-endmodule
-- 
2.16.5

