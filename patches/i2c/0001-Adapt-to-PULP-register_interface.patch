From 8d28cc4a539c1af7d4a36a22d96f385bb93409f0 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Sun, 19 Feb 2023 13:15:39 +0100
Subject: [PATCH] Adapt to PULP register_interface

---
 data/i2c.hjson | 26 ++------------------------
 rtl/i2c.sv     | 52 +++++++++++-----------------------------------------
 rtl/i2c_fsm.sv |  2 ++
 3 files changed, 15 insertions(+), 65 deletions(-)

diff --git a/data/i2c.hjson b/data/i2c.hjson
index 5cc5b485a..26120130f 100644
--- a/data/i2c.hjson
+++ b/data/i2c.hjson
@@ -4,24 +4,9 @@
 
 {
   name:               "i2c",
-  one_line_desc:      "I2C interface for host and device mode, supporting up to 1 Mbaud data rates",
-  design_spec:        "../doc",
-  dv_doc:             "../doc/dv",
-  hw_checklist:       "../doc/checklist",
-  sw_checklist:       "/sw/device/lib/dif/dif_i2c",
-  revisions: [
-    {
-      version:            "1.0",
-      life_stage:         "L1",
-      design_stage:       "D2S",
-      verification_stage: "V1",
-      dif_stage:          "S2",
-      notes:              ""
-    }
-  ]
-  clocking: [{clock: "clk_i", reset: "rst_ni"}],
+  clock_primary: "clk_i"
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
   // INPUT pins
   available_inout_list: [
@@ -66,14 +51,12 @@
     }
     { name: "tx_stretch"
       desc: "target mode interrupt: raised if the target is stretching clocks for a read command.  This is a level status interrupt."
-      type: "status"
     }
     { name: "tx_overflow"
       desc: "target mode interrupt: raised if TX FIFO has overflowed."
     }
     { name: "acq_full"
       desc: "target mode interrupt: raised if ACQ FIFO becomes full.  This is a level status interrupt."
-      type: "status"
     }
     { name: "unexp_stop"
       desc: "target mode interrupt: raised if STOP is received without a preceding NACK during an external host read."
@@ -96,11 +79,6 @@
       default: "64",
     }
   ],
-  countermeasures: [
-    { name: "BUS.INTEGRITY",
-      desc: "End-to-end bus integrity scheme."
-    }
-  ]
 
   // REGISTER definition
   regwidth: "32"
diff --git a/rtl/i2c.sv b/rtl/i2c.sv
index 9d7879b66..df051006f 100644
--- a/rtl/i2c.sv
+++ b/rtl/i2c.sv
@@ -4,23 +4,20 @@
 //
 // Description: I2C top level wrapper file
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module i2c
   import i2c_reg_pkg::*;
 #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
 ) (
   input                     clk_i,
   input                     rst_ni,
 
   // Bus Interface
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
-
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Generic IO
   input                     cio_scl_i,
@@ -51,41 +48,19 @@ module i2c
   i2c_reg2hw_t reg2hw;
   i2c_hw2reg_t hw2reg;
 
-  logic [NumAlerts-1:0] alert_test, alerts;
-
-  i2c_reg_top u_reg (
+  i2c_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
-    .tl_i,
-    .tl_o,
+    .reg_req_i,
+    .reg_rsp_o,
     .reg2hw,
     .hw2reg,
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o(alerts[0]),
     .devmode_i(1'b1)
   );
 
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   logic scl_int;
   logic sda_int;
 
@@ -127,9 +102,6 @@ module i2c
   assign cio_scl_en_o = ~scl_int;
   assign cio_sda_en_o = ~sda_int;
 
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
-  `ASSERT_KNOWN(AlertKnownO_A, alert_tx_o)
   `ASSERT_KNOWN(CioSclKnownO_A, cio_scl_o)
   `ASSERT_KNOWN(CioSclEnKnownO_A, cio_scl_en_o)
   `ASSERT_KNOWN(CioSdaKnownO_A, cio_sda_o)
@@ -150,6 +122,4 @@ module i2c
   `ASSERT_KNOWN(IntrUnexpStopKnownO_A, intr_unexp_stop_o)
   `ASSERT_KNOWN(IntrHostTimeoutKnownO_A, intr_host_timeout_o)
 
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
diff --git a/rtl/i2c_fsm.sv b/rtl/i2c_fsm.sv
index ad7246bf4..ff019408f 100644
--- a/rtl/i2c_fsm.sv
+++ b/rtl/i2c_fsm.sv
@@ -4,6 +4,8 @@
 //
 // Description: I2C finite state machine
 
+`include "common_cells/assertions.svh"
+
 module i2c_fsm import i2c_pkg::*;
 #(
   parameter int FifoDepth = 64,
-- 
2.16.5

