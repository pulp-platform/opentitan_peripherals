From 856bd01e28a74f3887c8674e0110d12d02dc756c Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Sun, 19 Feb 2023 13:14:56 +0100
Subject: [PATCH] Adapt to PULP register_interface

---
 prim_pulp_platform/prim_flop_2sync.sv | 33 ++++++++++++++++++++++++++
 prim_pulp_platform/prim_flop_en.sv    | 44 +++++++++++++++++++++++++++++++++++
 rtl/prim_fifo_async.sv                |  2 +-
 rtl/prim_fifo_sync.sv                 |  2 +-
 rtl/prim_fifo_sync_cnt.sv             |  2 +-
 rtl/prim_intr_hw.sv                   |  2 ++
 rtl/prim_max_tree.sv                  |  2 +-
 rtl/prim_packer_fifo.sv               |  2 +-
 rtl/prim_pulse_sync.sv                |  2 ++
 rtl/prim_sync_reqack.sv               |  2 +-
 rtl/prim_sync_reqack_data.sv          |  2 +-
 11 files changed, 88 insertions(+), 7 deletions(-)
 create mode 100644 hw/ip/prim/prim_pulp_platform/prim_flop_2sync.sv
 create mode 100644 hw/ip/prim/prim_pulp_platform/prim_flop_en.sv

diff --git a/prim_pulp_platform/prim_flop_2sync.sv b/prim_pulp_platform/prim_flop_2sync.sv
new file mode 100644
index 000000000..72f8de792
--- /dev/null
+++ b/prim_pulp_platform/prim_flop_2sync.sv
@@ -0,0 +1,33 @@
+// Copyright 2021 ETH Zurich and University of Bologna.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+//
+// Double-synchronizer flop implementation for opentitan primitive cells
+// using cells from pulp_platform common_cells.
+
+module prim_flop_2sync #(
+  parameter int               Width      = 16,
+  parameter logic [Width-1:0] ResetValue = '0,
+  // We keep this parameter only for compatibility
+  parameter bit               EnablePrimCdcRand = 1
+) (
+  input  logic clk_i,
+  input  logic rst_ni,
+  input  logic [Width-1:0] d_i,
+  output logic [Width-1:0] q_o
+);
+
+  // Note that multi-bit syncs are *almost always* a bad idea.
+  for (genvar i = 0; i < Width; ++i) begin : gen_syncs
+    sync #(
+      .STAGES     (2),
+      .ResetValue (ResetValue[i])
+    ) i_sync (
+      .clk_i,
+      .rst_ni,
+      .serial_i (d_i[i]),
+      .serial_o (q_o[i])
+    );
+  end
+
+endmodule
diff --git a/prim_pulp_platform/prim_flop_en.sv b/prim_pulp_platform/prim_flop_en.sv
new file mode 100644
index 000000000..271166341
--- /dev/null
+++ b/prim_pulp_platform/prim_flop_en.sv
@@ -0,0 +1,44 @@
+// Copyright 2021 ETH Zurich and University of Bologna.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+//
+// Double-synchronizer flop implementation for opentitan primitive cells
+// using cells from pulp_platform common_cells.
+
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+`include "common_cells/assertions.svh"
+
+module prim_flop_en #(
+  parameter int               Width      = 1,
+  parameter bit               EnSecBuf   = 0,
+  parameter logic [Width-1:0] ResetValue = 0
+) (
+  input                    clk_i,
+  input                    rst_ni,
+  input                    en_i,
+  input        [Width-1:0] d_i,
+  output logic [Width-1:0] q_o
+);
+
+  logic en;
+  if (EnSecBuf) begin : gen_en_sec_buf
+    tc_clk_buffer u_en_buf (
+      .clk_i ( en_i ),
+      .clk_o ( en )
+    );
+  end else begin : gen_en_no_sec_buf
+    assign en = en_i;
+  end
+
+  always_ff @(posedge clk_i or negedge rst_ni) begin
+    if (!rst_ni) begin
+      q_o <= ResetValue;
+    end else if (en) begin
+      q_o <= d_i;
+    end
+  end
+
+endmodule
diff --git a/rtl/prim_fifo_async.sv b/rtl/prim_fifo_async.sv
index 0edebc768..df90ccdcc 100644
--- a/rtl/prim_fifo_async.sv
+++ b/rtl/prim_fifo_async.sv
@@ -4,7 +4,7 @@
 //
 // Generic asynchronous fifo for use in a variety of devices.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_fifo_async #(
   parameter  int unsigned Width  = 16,
diff --git a/rtl/prim_fifo_sync.sv b/rtl/prim_fifo_sync.sv
index 5e9ee9c3e..1d786830d 100644
--- a/rtl/prim_fifo_sync.sv
+++ b/rtl/prim_fifo_sync.sv
@@ -4,7 +4,7 @@
 //
 // Generic synchronous fifo for use in a variety of devices.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_fifo_sync #(
   parameter int unsigned Width       = 16,
diff --git a/rtl/prim_fifo_sync_cnt.sv b/rtl/prim_fifo_sync_cnt.sv
index ec69515b0..b8f6fba82 100644
--- a/rtl/prim_fifo_sync_cnt.sv
+++ b/rtl/prim_fifo_sync_cnt.sv
@@ -4,7 +4,7 @@
 //
 // Generic synchronous fifo for use in a variety of devices.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_fifo_sync_cnt #(
   parameter int Depth = 4,
diff --git a/rtl/prim_intr_hw.sv b/rtl/prim_intr_hw.sv
index 1813194e1..1e87f6c6b 100644
--- a/rtl/prim_intr_hw.sv
+++ b/rtl/prim_intr_hw.sv
@@ -7,6 +7,8 @@
 // This module can be instantiated once per interrupt field, or
 // "bussified" with all fields of the interrupt vector.
 
+`include "common_cells/assertions.svh"
+
 module prim_intr_hw # (
   parameter int unsigned Width = 1,
   parameter bit FlopOutput = 1,
diff --git a/rtl/prim_max_tree.sv b/rtl/prim_max_tree.sv
index e23a76f30..58b7d05fe 100644
--- a/rtl/prim_max_tree.sv
+++ b/rtl/prim_max_tree.sv
@@ -14,7 +14,7 @@
 // be equal to the input value at index 0.
 
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_max_tree #(
   parameter int NumSrc = 32,
diff --git a/rtl/prim_packer_fifo.sv b/rtl/prim_packer_fifo.sv
index 95c143da5..57781d41d 100644
--- a/rtl/prim_packer_fifo.sv
+++ b/rtl/prim_packer_fifo.sv
@@ -39,7 +39,7 @@
 // depth_o    0000000000|1111111111|00000000000000000000000000000000000000000
 
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_packer_fifo #(
   parameter int InW  = 32,
diff --git a/rtl/prim_pulse_sync.sv b/rtl/prim_pulse_sync.sv
index 4ce7a7e9e..f37bca91c 100644
--- a/rtl/prim_pulse_sync.sv
+++ b/rtl/prim_pulse_sync.sv
@@ -8,6 +8,8 @@
 // appropriately apart from each other depending on the clock frequency ratio
 // of the two clock domains.
 
+`include "common_cells/assertions.svh"
+
 module prim_pulse_sync (
   // source clock domain
   input  logic clk_src_i,
diff --git a/rtl/prim_sync_reqack.sv b/rtl/prim_sync_reqack.sv
index 518546fae..33c679f85 100644
--- a/rtl/prim_sync_reqack.sv
+++ b/rtl/prim_sync_reqack.sv
@@ -29,7 +29,7 @@
 // For further information, see Section 8.2.4 in H. Kaeslin, "Top-Down Digital VLSI Design: From
 // Architecture to Gate-Level Circuits and FPGAs", 2015.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_sync_reqack #(
   parameter bit EnRstChks = 1'b0,   // Enable reset-related assertion checks, disabled by default.
diff --git a/rtl/prim_sync_reqack_data.sv b/rtl/prim_sync_reqack_data.sv
index c4ef5e321..ba1ce5a4c 100644
--- a/rtl/prim_sync_reqack_data.sv
+++ b/rtl/prim_sync_reqack_data.sv
@@ -14,7 +14,7 @@
 // Under the hood, this module uses a prim_sync_reqack primitive for synchronizing the
 // REQ/ACK handshake. See prim_sync_reqack.sv for more details.
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
 module prim_sync_reqack_data #(
   parameter int unsigned Width       = 1,
-- 
2.16.5

