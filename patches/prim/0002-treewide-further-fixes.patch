From 43e1aafab41a34a6e2889608b8001082c13ec697 Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Wed, 15 Feb 2023 18:05:33 +0100
Subject: [PATCH] treewide: further fixes

---
 prim_pulp_platform/prim_flop_2sync.sv |  4 +++-
 prim_pulp_platform/prim_flop_en.sv    | 44 +++++++++++++++++++++++++++++++++++
 rtl/prim_intr_hw.sv                   |  2 ++
 rtl/prim_pulse_sync.sv                |  2 ++
 4 files changed, 51 insertions(+), 1 deletion(-)
 create mode 100644 hw/ip/prim/prim_pulp_platform/prim_flop_en.sv

diff --git a/prim_pulp_platform/prim_flop_2sync.sv b/prim_pulp_platform/prim_flop_2sync.sv
index e68f1010b..72f8de792 100644
--- a/prim_pulp_platform/prim_flop_2sync.sv
+++ b/prim_pulp_platform/prim_flop_2sync.sv
@@ -7,7 +7,9 @@
 
 module prim_flop_2sync #(
   parameter int               Width      = 16,
-  parameter logic [Width-1:0] ResetValue = '0
+  parameter logic [Width-1:0] ResetValue = '0,
+  // We keep this parameter only for compatibility
+  parameter bit               EnablePrimCdcRand = 1
 ) (
   input  logic clk_i,
   input  logic rst_ni,
diff --git a/prim_pulp_platform/prim_flop_en.sv b/prim_pulp_platform/prim_flop_en.sv
new file mode 100644
index 000000000..27aa3bfaf
--- /dev/null
+++ b/prim_pulp_platform/prim_flop_en.sv
@@ -0,0 +1,44 @@
+// Copyright 2021 ETH Zurich and University of Bologna.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+//
+// Double-synchronizer flop implementation for opentitan primitive cells
+// using cells from pulp_platform common_cells.
+
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+`include "common_cells/assertions.svh"
+
+module prim_generic_flop_en #(
+  parameter int               Width      = 1,
+  parameter bit               EnSecBuf   = 0,
+  parameter logic [Width-1:0] ResetValue = 0
+) (
+  input                    clk_i,
+  input                    rst_ni,
+  input                    en_i,
+  input        [Width-1:0] d_i,
+  output logic [Width-1:0] q_o
+);
+
+  logic en;
+  if (EnSecBuf) begin : gen_en_sec_buf
+    tc_clk_buffer u_en_buf (
+      .clk_i ( en_i ),
+      .clk_i ( en )
+    );
+  end else begin : gen_en_no_sec_buf
+    assign en = en_i;
+  end
+
+  always_ff @(posedge clk_i or negedge rst_ni) begin
+    if (!rst_ni) begin
+      q_o <= ResetValue;
+    end else if (en) begin
+      q_o <= d_i;
+    end
+  end
+
+endmodule
diff --git a/rtl/prim_intr_hw.sv b/rtl/prim_intr_hw.sv
index 1813194e1..1e87f6c6b 100644
--- a/rtl/prim_intr_hw.sv
+++ b/rtl/prim_intr_hw.sv
@@ -7,6 +7,8 @@
 // This module can be instantiated once per interrupt field, or
 // "bussified" with all fields of the interrupt vector.
 
+`include "common_cells/assertions.svh"
+
 module prim_intr_hw # (
   parameter int unsigned Width = 1,
   parameter bit FlopOutput = 1,
diff --git a/rtl/prim_pulse_sync.sv b/rtl/prim_pulse_sync.sv
index 4ce7a7e9e..f37bca91c 100644
--- a/rtl/prim_pulse_sync.sv
+++ b/rtl/prim_pulse_sync.sv
@@ -8,6 +8,8 @@
 // appropriately apart from each other depending on the clock frequency ratio
 // of the two clock domains.
 
+`include "common_cells/assertions.svh"
+
 module prim_pulse_sync (
   // source clock domain
   input  logic clk_src_i,
-- 
2.16.5

